{"version":3,"sources":["dmAppointmentPlus1.ts","index.tsx"],"names":["say","text","send","_context","type","value","grammar","title","day","time","meet","celebrity","yes_nogrammar","yes_no","help","dmMachine","initial","states","idle","on","CLICK","init","TTS_READY","Help","help_message","entry","ENDSPEECH","Appointment","hist","Hej","assign","counter","context","RECOGNISED","target","cond","recResult","utterance","confidence","actions","username","TIMEOUT","prompt0","prompt1","prompt2","ask","nomatch","menu","prompt","yo","celeb_info","invoke","id","src","event","fetch","Request","then","data","json","onDone","famouS","AbstractText","console","log","onError","meeting_with_celeb","you","welcome","meeting","whole_day","date","all_day","confirmation_whole_day","confirmation_all_day","confirmation_with_time","meeting_created","cancel","REGION","inspect","url","iframe","machine","Machine","dm","asrtts","audioCtx","_ctx","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","stream","createMediaStreamSource","getToken","_evt","getAuthorizationToken","azureAuthorizationToken","ponyfillTTS","_event","callback","_onReceive","ponyfill","createSpeechSynthesisPonyfill","audioContext","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","process","voice","find","v","test","name","error","TTS_ERROR","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","SELECT","noinput","delay","tdmPassivity","STARTSPEECH","inprogress","match","pause","speaking","fail","recLogResult","logIntent","nluData","intent","ReactiveButton","props","promptText","state","tdmVisualOutputInfo","el","attribute","promptImage","circleClass","matches","className","alt","style","FigureButton","caption","alternative","imageSrc","App","useMachine","devTools","changeColour","asEffect","document","body","background","recStart","asr","start","recStop","abort","ttsStart","content","REACT_APP_TTS_LEXICON","debug","onend","speak","ttsStop","ponyfillASR","SpeechRecognition","createSpeechRecognitionPonyfill","lang","continuous","interimResults","onresult","result","results","isFinal","transcript","current","figureButtons","tdmExpectedAlternatives","filter","o","visual_information","map","i","onClick","semantic_expression","method","headers","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.7011885b.chunk.js","sourcesContent":["import { TIMEOUT } from \"dns\";\nimport { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\nconst kbRequest = (text: string) =>\n    fetch(new Request(`https://cors.eu.org/https://api.duckduckgo.com/?q=${text}&format=json&skip_disambig=1`)).then(data => data.json())\n\nconst grammar: { [index: string]: { title?: string, day?: string, time?: string, meet?:string, celebrity?:string,username?:string } } = {\n    \"Lecture.\": { title: \"Dialogue systems lecture\" },\n    \"Lunch.\": { title: \"Lunch at the canteen\" },\n    //days\n    \"Monday\": { day: \"Monday\"},\n    \"Tuesday.\": { day: \"Tuesday\"},\n    \"Wednesday.\": { day: \"Wednesday\"},\n    \"Thursday.\": { day: \"Thursday\"},\n    \"Friday\": { day: \"Friday\" },\n    \n    //time\n    \"At 9\": { time: \"nine\"},\n    \"At 10\": { time: \"ten\" },\n    \"At 11\": { time: \"eleven\"},\n    \"At 12\": { time: \"twelve\"},\n    \"At 1:00\": { time: \"one\"},\n    \"At 2:00\": { time: \"two\"},\n    \"At 3:00\": { time: \"three\"},\n    \"At 4:00\": { time: \"four\"},\n    \"At 5:00\": { time: \"five\"},\n    \"At 6:00\": { time: \"six\"},\n    \"At 7:00\": { time: \"seven\"},\n    \"At 8:00\": { time: \"eight\"},\n   \n    \"Create a meeting.\":{ meet:\"yes\"},\n    \"Ask about someone.\":{ celebrity:\"no\" },\n    \n}\n\nconst yes_nogrammar: { [index: string]: { yes_no?: string, help?: string} } = {\n    \"Yes.\": { yes_no: \"yes\"},\n    \"Of course.\": { yes_no: \"yes\"},\n    \"Sure.\": { yes_no: \"yes\"},\n    \"Absolutely.\": { yes_no: \"yes\"},\n    \"No.\": { yes_no: \"no\"},\n    \"No way.\": { yes_no: \"no\"},\n    \"Of course not.\": { yes_no: \"no\"},\n    \"Absolutely not.\": { yes_no: \"no\"},\n    \"Help me.\":{help: \"help\"},\n    \"Help.\":{help:\"help\"},\n    \"I would like to help me\":{help:\"help\"}\n}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    \n    states: {\n        idle: {\n            on: {\n                CLICK: 'init'\n            }\n        },\n        init: {\n            on: {\n                TTS_READY: 'Appointment',\n                CLICK: 'Appointment'\n            }\n        },\n        Help: { \n            initial: 'help_message',\n            states: {\n                help_message: {\n                    entry: say(\"How can I help you?\"),\n                    on: { ENDSPEECH: '#root.dm.Appointment.hist' }, \n                }\n            }\n        },\n        Appointment: {\n            initial: 'Hej',\n            states: {\n                hist: {\n                    type: 'history',\n                },\n                Hej: {\n                    initial: 'prompt0',\n                    entry: assign({counter: (context) => context.counter = 0}),\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.Help',\n                                cond: (context) => \"help\" in (yes_nogrammar[context.recResult[0].utterance] || {}),\n                            },\n                            {\n                                target: 'menu',\n                                cond: (context) => context.recResult[0].confidence > 0.6,\n                                actions: assign({ username: (context) => context.recResult[0].utterance }) \n                            },\n                            {\n                                target: '.nomatch'\n                            }\n                            ],\n                        TIMEOUT: [\n                            {\n                                target: '.prompt0',\n                                cond: (context) => context.counter === 0,\n                            },\n                            {\n                                target: '.prompt1',\n                                cond: (context) => context.counter === 1,\n                            },\n                            {\n                                target: '.prompt2',\n                                cond: (context) => context.counter === 2,\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => context.counter === 3,\n                            },\n                        ],\n                        },\n                    states: {\n                        hist: {\n                            type: 'history',\n                        },\n                        prompt0: {\n                            entry: [say(\"What is your name?\"), \n                                    assign({counter: (context) => context.counter +1})],\n                            on: { ENDSPEECH: 'ask' }\n                            },\n                        prompt1: {\n                            entry: [say(\"could you say your name?\"), \n                                    assign({counter: (context) => context.counter +1})],\n                            on: { ENDSPEECH: 'ask' }\n                            },\n                        prompt2: {\n                            entry: [say(\"Please, tell me your name.\"), \n                                    assign({counter: (context) => context.counter +1})],\n                            on: { ENDSPEECH: 'ask' }\n                            },\n                            ask: {\n                                entry: send('LISTEN'),\n                            },\n                        nomatch: {\n                            entry: say(\"Sorry, could you repeat?\"),\n                            on: { ENDSPEECH: 'ask' }\n                            }\n                        }\n                    },\n            menu: {\n                initial: 'prompt',\n                entry: assign({counter: (context) => context.counter = 0}),\n                on: {\n                    RECOGNISED: [\n                        {\n                            target: '#root.dm.Help',\n                            cond: (context) => \"help\" in (yes_nogrammar[context.recResult[0].utterance] || {}),\n                        },\n                        {\n                            target: 'welcome',\n                            cond: (context) => \"meet\" in (grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\n                            actions: assign({ meet: (context) => grammar[context.recResult[0].utterance].meet!})\n                        },\n                        {\n                            target: 'celebrity',\n                            cond: (context) => \"celebrity\" in (grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\n                            actions: assign({ celebrity: (context) => grammar[context.recResult[0].utterance].celebrity!})\n                        },\n                        {\n                            target: '.nomatch'\n                        }\n                        ],\n                    TIMEOUT: [\n                        {\n                            target: '.prompt',\n                            cond: (context) => context.counter === 0,\n                        },\n                        {\n                            target: '#root.dm.init',\n                            cond: (context) => context.counter === 3,\n                        },\n                    ],\n                },\n                states: {\n                    prompt: {\n                        entry: send((context) => ({\n                            type: 'SPEAK',\n                            value: `Hi ${context.username}`\n                        })),\n                        on: { ENDSPEECH: 'ask' },\n                    },\n                    ask: {\n                        entry: [say(\"Would you like to create a meeting or ask about someone?\"), assign({counter: (context) => context.counter + 1})],\n                        on: { ENDSPEECH: 'yo'}\n                    },\n                    yo: {\n                        entry: send('LISTEN'),\n                    },\n                    nomatch: {\n                        entry: say(\"Sorry, I didn't understand that.\"),\n                        on: { ENDSPEECH: 'ask' }\n                    }\n                }\n            },\n            celebrity: {\n                initial: 'prompt0',\n                entry:assign({counter:(context)=>context.counter}),\n                on: {\n                    RECOGNISED: [\n                        {\n                            target: '#root.dm.Help',\n                            cond: (context) => \"help\" in (yes_nogrammar[context.recResult[0].utterance] || {}),\n                        },\n                        {\n                            target:'celeb_info',\n                            cond: (context) => context.recResult[0].confidence > 0.6,\n                                    actions: assign({ celebrity: (context) => context.recResult[0].utterance })\n                                },\n                        \n                    ],\n                    TIMEOUT: [\n                        {\n                            target: '.prompt0',\n                            cond: (context) => context.counter === 0,\n                        },\n                        {\n                            target: '.prompt1',\n                            cond: (context) => context.counter === 1,\n                        },\n                        {\n                            target: '.prompt2',\n                            cond: (context) => context.counter === 2,\n                        },\n                        {\n                            target: '#root.dm.init',\n                            cond: (context) => context.counter === 3,\n                        },\n                    ],\n                },\n                states: {\n                    prompt0: {\n                        entry: say(\"For whom do you want to know?\"),\n                        on: { ENDSPEECH: 'ask' }\n                    },\n                    prompt1: {\n                        entry: say(\"Who are you searching for?\"),\n                        on: { ENDSPEECH: 'ask' }\n                    },\n                    prompt2: {\n                        entry: say(\"For whom do you want information?\"),\n                        on: { ENDSPEECH: 'ask' }\n                    },\n                    ask: {\n                        entry: send('LISTEN'),\n                    }\n                }\n            },\n                celeb_info: {\n                    invoke: {\n                        id: 'famouSId',\n                        src: (context, event) => kbRequest(context.celebrity),\n                        onDone: {\n                            target:  'meeting_with_celeb',\n                            actions: [assign({ famouS: (context, event) => event.data.AbstractText }),(context, event) => console.log(context, event)\n                            ]\n                        },\n                        onError: {\n                            target: 'celebrity',\n                        },\n                    },\n                },\n                meeting_with_celeb: {\n                    entry: send((context) => ({\n                        type: 'SPEAK',\n                        value:  `Ok,Some information about ${context.celebrity}, ${context.famouS}.`\n                    })),\n                    on: { ENDSPEECH: 'you' }\n                },\n                \n                you: {\n                    initial: 'prompt0',\n                    entry: assign({counter: (context) => context.counter = 0}),\n                    on: {\n                        RECOGNISED: [\n                            {target: '#root.dm.Help',\n                            cond: (context) => \"help\" in (yes_nogrammar[context.recResult[0].utterance] || {}),\n                        },\n                            \n                            {target: 'date',\n                            cond: (context) => \"yes_no\" in (yes_nogrammar[context.recResult[0].utterance] || {})  && yes_nogrammar[context.recResult[0].utterance].yes_no === 'yes',\n                            actions: assign({ title: (context) => ` ${context.celebrity}` })\n                            },\n                            {target: 'meeting',\n                            cond: (context) => \"yes_no\" in (yes_nogrammar[context.recResult[0].utterance] || {})  && yes_nogrammar[context.recResult[0].utterance].yes_no === 'no',\n                            },\n                            {target: '.nomatch'}\n                        ],\n                        TIMEOUT: [\n                            {\n                                target: '.prompt0',\n                                cond: (context) => context.counter === 0,\n                            },\n                            {\n                                target: '.prompt1',\n                                cond: (context) => context.counter === 1,\n                            },\n                            {\n                                target: '.prompt2',\n                                cond: (context) => context.counter === 2,\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => context.counter === 3,\n                            },\n                        ],\n                    },\n                    states: {\n                        prompt0: {\n                            entry: [say('Do you want to meet the celecrity}'), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt1: {\n                            entry: [say(\"Do you want to create this meeting?\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt2: {\n                            entry: [say(\"Do you want to create a meeting with the celebrity?\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        ask: {\n                            entry: send('LISTEN'),\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry, what did you say?\"),\n                            on: { ENDSPEECH: 'ask' }\n                        }\n                    }\n                },\n                welcome: {\n                    entry: send((context) => ({\n                        type: 'SPEAK',\n                        value: `Ok!`,\n                    })),\n                    on: { ENDSPEECH: 'meeting' }\n                },\n                meeting: {\n                    initial: 'prompt0',\n                    entry: assign({counter: (context) => context.counter = 0}),\n                    on: {\n                        RECOGNISED: [\n                            {target: '#root.dm.Help',\n                                cond: (context) => \"help\" in (yes_nogrammar[context.recResult[0].utterance] || {}),\n                            },\n                            {target: 'day',\n                            cond: (context) => \"title\" in (grammar[context.recResult[0].utterance] || {}),\n                            actions: assign((context) => { return { title: grammar[context.recResult[0].utterance].title! }}),\n                        },\n                            \n                            {target: '.nomatch'}\n                        ],\n                        TIMEOUT: [\n                            {\n                                target: '.prompt0',\n                                cond: (context) => context.counter === 0,\n                            },\n                            {\n                                target: '.prompt1',\n                                cond: (context) => context.counter === 1,\n                            },\n                            {\n                                target: '.prompt2',\n                                cond: (context) => context.counter === 2,\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => context.counter === 3,\n                            },\n                        ],\n                    },\n                    states: {\n                        prompt0: {\n                            entry: [say(\"What is your meeting about?\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt1: {\n                            entry: [say(\"Tell me about your meeting\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt2: {\n                            entry: [say(\"What should I call your meeting?\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        ask: {\n                            entry: send('LISTEN'),\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry, I don't know that. Could you repeat?\"),\n                            on: { ENDSPEECH: 'ask' }\n                        }\n                    }\n                },\n                day: {\n                    initial: \"prompt0\",\n                    on: {\n                        RECOGNISED: [{target: '#root.dm.Help',\n                        cond: (context) => \"help\" in (yes_nogrammar[context.recResult[0].utterance] || {}),\n                    },\n                    {\n                            cond: (context) => \"day\" in (grammar[context.recResult[0].utterance] || {}),\n                            actions: assign((context) => { return { day: grammar[context.recResult[0].utterance].day! } }),\n                            target: \"whole_day\"\n                        },\n                            { target: \".nomatch\" }],\n        \n                        TIMEOUT: [\n                            {\n                                target: '.prompt0',\n                                cond: (context) => context.counter === 0,\n                            },\n                            {\n                                target: '.prompt1',\n                                cond: (context) => context.counter === 1,\n                            },\n                            {\n                                target: '.prompt2',\n                                cond: (context) => context.counter === 2,\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => context.counter === 3,\n                            },\n                        ],\n                    },\n                    states: {\n                        prompt0: {\n                            entry: [say(\"On which day is it?\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt1: {\n                            entry: [say(\"On which day will this meeting take place?\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt2: {\n                            entry: [say(\"Please tell me the day of this meeting.\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        ask: {\n                            entry: send('LISTEN'),\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry, what day did you say?\"),\n                            on: { ENDSPEECH: 'ask' }\n                        }\n                    }\n                },\n                whole_day: {\n                    initial: \"prompt0\",\n                    entry: assign({counter: (context) => context.counter = 0}),\n                    on: {\n                        RECOGNISED: [\n                            {target: '#root.dm.Help',\n                        cond: (context) => \"help\" in (yes_nogrammar[context.recResult[0].utterance] || {}),\n                    },\n                            { target: 'confirmation_whole_day', cond: (context) => \"yes_no\" in (yes_nogrammar[context.recResult[0].utterance] || {})  && yes_nogrammar[context.recResult[0].utterance].yes_no === 'yes'},\n                            { target: 'time', cond: (context) =>  \"yes_no\" in (yes_nogrammar[context.recResult[0].utterance] || {}) && yes_nogrammar[context.recResult[0].utterance].yes_no === 'no' },\n                        \n                            { target: \".nomatch\" }],\n                        TIMEOUT: [\n                            {\n                                target: '.prompt0',\n                                cond: (context) => context.counter === 0,\n                            },\n                            {\n                                target: '.prompt1',\n                                cond: (context) => context.counter === 1,\n                            },\n                            {\n                                target: '.prompt2',\n                                cond: (context) => context.counter === 2,\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => context.counter === 3,\n                            },\n                        ],\n                    },\n                    states: {\n                        prompt0: {\n                            entry: [say(\"Will it take the whole day?\"), assign({counter: (context) => context.counter + 1}), ],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt1: {\n                            entry: [say(\"Will the meeting take the whole day?\"), assign({counter: (context) => context.counter + 1}), ],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt2: {\n                            entry: [say(\"Will the meeting take the whole day\"), assign({counter: (context) => context.counter + 1}), ],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        ask: {\n                            entry: send('LISTEN'),\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                            on: { ENDSPEECH: 'ask' }\n                        }\n                    }\n                },\n                date: {\n                    initial: \"prompt0\",\n                    on: {\n                        RECOGNISED: [{target: '#root.dm.Help',\n                        cond: (context) => \"help\" in (yes_nogrammar[context.recResult[0].utterance] || {}),\n                    },\n                    {\n                            cond: (context) => \"day\" in (grammar[context.recResult[0].utterance] || {}),\n                            actions: assign((context) => { return { day: grammar[context.recResult[0].utterance].day! } }),\n                            target: \"all_day\"\n                        },\n                            { target: \".nomatch\" }],\n        \n                        TIMEOUT: [\n                            {\n                                target: '.prompt0',\n                                cond: (context) => context.counter === 0,\n                            },\n                            {\n                                target: '.prompt1',\n                                cond: (context) => context.counter === 1,\n                            },\n                            {\n                                target: '.prompt2',\n                                cond: (context) => context.counter === 2,\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => context.counter === 3,\n                            },\n                        ],\n                    },\n                    states: {\n                        prompt0: {\n                            entry: [say(\"On which day is your meeting?\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt1: {\n                            entry: [say(\"On which day is your meeting?\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt2: {\n                            entry: [say(\"Could you tell which day is your meeting\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        ask: {\n                            entry: send('LISTEN'),\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry, could you repeat?\"),\n                            on: { ENDSPEECH: 'ask' }\n                        }\n                    }\n                },\n                all_day: {\n                    initial: \"prompt0\",\n                    entry: assign({counter: (context) => context.counter = 0}),\n                    on: {\n                        RECOGNISED: [\n                            {target: '#root.dm.Help',\n                        cond: (context) => \"help\" in (yes_nogrammar[context.recResult[0].utterance] || {}),\n                    },\n                            { target: 'confirmation_all_day', cond: (context) => \"yes_no\" in (yes_nogrammar[context.recResult[0].utterance] || {})  && yes_nogrammar[context.recResult[0].utterance].yes_no === 'yes'},\n                            { target: 'time', cond: (context) =>  \"yes_no\" in (yes_nogrammar[context.recResult[0].utterance] || {}) && yes_nogrammar[context.recResult[0].utterance].yes_no === 'no' },\n                        \n                            { target: \".nomatch\" }],\n                        TIMEOUT: [\n                            {\n                                target: '.prompt0',\n                                cond: (context) => context.counter === 0,\n                            },\n                            {\n                                target: '.prompt1',\n                                cond: (context) => context.counter === 1,\n                            },\n                            {\n                                target: '.prompt2',\n                                cond: (context) => context.counter === 2,\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => context.counter === 3,\n                            },\n                        ],\n                    },\n                    states: {\n                        prompt0: {\n                            entry: [say(\"Will it take the whole day?\"), assign({counter: (context) => context.counter + 1}), ],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt1: {\n                            entry: [say(\"Will the meeting take the whole day?\"), assign({counter: (context) => context.counter + 1}), ],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt2: {\n                            entry: [say(\"Will the meeting last the whole day?\"), assign({counter: (context) => context.counter + 1}), ],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        ask: {\n                            entry: send('LISTEN'),\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry, I don't understand.\"),\n                            on: { ENDSPEECH: 'ask' }\n                        }\n                    }\n                },\n                time: {\n                    initial: \"prompt0\",\n                    entry: assign({counter: (context) => context.counter = 0}),\n                    on: {\n                        RECOGNISED: [{\n                            \n                                target: '#root.dm.Help',\n                                cond: (context) => \"help\" in (yes_nogrammar[context.recResult[0].utterance] || {}),\n                            },\n                            {\n                            cond: (context) => \"time\" in (grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\n                            actions: assign((context) => { return { time: grammar[context.recResult[0].utterance].time! } }),\n                            target: \"confirmation_with_time\"\n                        },\n                            { target: \".nomatch\" }],\n                        TIMEOUT: [\n                            {\n                                target: '.prompt0',\n                                cond: (context) => context.counter === 0,\n                            },\n                            {\n                                target: '.prompt1',\n                                cond: (context) => context.counter === 1,\n                            },\n                            {\n                                target: '.prompt2',\n                                cond: (context) => context.counter === 2,\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => context.counter === 3,\n                            },\n                        ],\n                    \n                    },\n                    states: {\n                        prompt0: {\n                            entry: [say(\"What time is your meeting?\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt1: {\n                            entry: [say(\"Could you tell me what time is your meeting?\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt2: {\n                            entry: [say(\"Please tell me what time is your meeting.\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        ask: {\n                            entry: send('LISTEN'),\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry, what time did you say?\"),\n                            on: { ENDSPEECH: 'ask' }\n                        }\n                    }\n                },\n                confirmation_whole_day: {\n                    initial: \"prompt0\",\n                    entry: assign({counter: (context) => context.counter = 0}),\n                    on: {\n                        RECOGNISED: [{\n                            target: '#root.dm.Help',\n                                        cond: (context) => \"help\" in (yes_nogrammar[context.recResult[0].utterance] || {}),\n                                    },\n                                    {\n                             target: 'meeting_created', \n                             cond: (context) => \"yes_no\" in (yes_nogrammar[context.recResult[0].utterance] || {}) && yes_nogrammar[context.recResult[0].utterance].yes_no === 'yes' },\n                             { target: 'time', \n                             cond: (context) => \"yes_no\" in (yes_nogrammar[context.recResult[0].utterance] || {}) && yes_nogrammar[context.recResult[0].utterance].yes_no === 'no'},\n                            { target: \".nomatch\" }],\n                        TIMEOUT: [\n                            {\n                                target: '.prompt0',\n                                cond: (context) => context.counter === 0,\n                            },\n                            {\n                                target: '.prompt1',\n                                cond: (context) => context.counter === 1,\n                            },\n                            {\n                                target: '.prompt2',\n                                cond: (context) => context.counter === 2,\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => context.counter === 3,\n                            },\n                        ],\n                    \n                    },\n                    states: {\n                        prompt0: {\n                            entry: [send((context) => ({\n                                type: 'SPEAK',\n                                value: `Do you want me to create a meeting titled ${context.title} on ${context.day}?`,\n                            })),\n                            assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt1: {\n                            entry: [send((context) => ({\n                                type: 'SPEAK',\n                                value: `Should I create a meeting called ${context.title} on ${context.day}?`,\n                            })),\n                            assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt2: {\n                            entry: [send((context) => ({\n                                type: 'SPEAK',\n                                value: `Do you want me to create a meeting titled ${context.title} on ${context.day}?`,\n                            })),\n                            assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n        \n                        ask: {\n                            entry: send('LISTEN'),\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry, I don't understand that.\"),\n                            on: { ENDSPEECH: 'ask' }\n                        }\n                    }\n                },\n                confirmation_all_day: {\n                    initial: \"prompt0\",\n                    entry: assign({counter: (context) => context.counter = 0}),\n                    on: {\n                        RECOGNISED: [{\n                            target: '#root.dm.Help',\n                                        cond: (context) => \"help\" in (yes_nogrammar[context.recResult[0].utterance] || {}),\n                                    },\n                                    {\n                             target: 'meeting_created', \n                             cond: (context) => \"yes_no\" in (yes_nogrammar[context.recResult[0].utterance] || {}) && yes_nogrammar[context.recResult[0].utterance].yes_no === 'yes' },\n                             { target: 'time', \n                             cond: (context) => \"yes_no\" in (yes_nogrammar[context.recResult[0].utterance] || {}) && yes_nogrammar[context.recResult[0].utterance].yes_no === 'no'},\n                            { target: \".nomatch\" }],\n                        TIMEOUT: [\n                            {\n                                target: '.prompt0',\n                                cond: (context) => context.counter === 0,\n                            },\n                            {\n                                target: '.prompt1',\n                                cond: (context) => context.counter === 1,\n                            },\n                            {\n                                target: '.prompt2',\n                                cond: (context) => context.counter === 2,\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => context.counter === 3,\n                            },\n                        ],\n                    \n                    },\n                    states: {\n                        prompt0: {\n                            entry: [send((context) => ({\n                                type: 'SPEAK',\n                                value: `Do you want me to create a meeting with ${context.celebrity} on ${context.day}?`,\n                            })),\n                            assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt1: {\n                            entry: [send((context) => ({\n                                type: 'SPEAK',\n                                value: `Should I create a meeting with ${context.celebrity} on ${context.day}?`,\n                            })),\n                            assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt2: {\n                            entry: [send((context) => ({\n                                type: 'SPEAK',\n                                value: `Do you want me to create a meeting with ${context.celebrity} on ${context.day}?`,\n                            })),\n                            assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n        \n                        ask: {\n                            entry: send('LISTEN'),\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry, I don't understand that.\"),\n                            on: { ENDSPEECH: 'ask' }\n                        }\n                    }\n                },\n                confirmation_with_time: {\n                    initial: \"prompt0\",\n                    on: {\n                        RECOGNISED: [{\n                            target: '#root.dm.Help',\n                            cond: (context) => \"help\" in (yes_nogrammar[context.recResult[0].utterance] || {}),\n                                    },\n                                {\n                             target: 'meeting_created', \n                             cond: (context) =>\"yes_no\" in (yes_nogrammar[context.recResult[0].utterance] || {}) && yes_nogrammar[context.recResult[0].utterance].yes_no === 'yes'},\n                             { target: 'meeting', \n                             cond: (context) => \"yes_no\" in (yes_nogrammar[context.recResult[0].utterance] || {}) && yes_nogrammar[context.recResult[0].utterance].yes_no === 'no'},\n                            { target: \".nomatch\" }\n                        ],\n                        TIMEOUT: [\n                            {\n                                target: '.prompt0',\n                                cond: (context) => context.counter === 0,\n                            },\n                            {\n                                target: '.prompt1',\n                                cond: (context) => context.counter === 1,\n                            },\n                            {\n                                target: '.prompt2',\n                                cond: (context) => context.counter === 2,\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => context.counter === 3,\n                            },\n                        ],\n                    \n        \n                    },\n                    states: {\n                        prompt0: {\n                            entry: [send((context) => ({\n                                type: 'SPEAK',\n                                value: `Do you want me to create a meeting titled ${context.title} on ${context.day} at ${context.time}?`\n                            })),\n                            assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt1: {\n                            entry: [send((context) => ({\n                                type: 'SPEAK',\n                                value: `Should I create a meeting titled ${context.title} on ${context.day} at ${context.time}?`\n                            })),\n                            assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt2: {\n                            entry: [send((context) => ({\n                                type: 'SPEAK',\n                                value: `Please tell me if you want me to create a meeting titled ${context.title} on ${context.day} at ${context.time}.`\n                            })),\n                            assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        ask: {\n                            entry: send('LISTEN'),\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry, I don't understand. Could you repeat?\"),\n                            on: { ENDSPEECH: 'ask' }\n                        }\n                    }\n                },\n                meeting_created: {\n                    initial: \"prompt\",\n                    states: {\n                        prompt: { entry: say(\"Ok.Your meeting has been created!\") }\n                    }\n                },\n            },\n        }\n    }\n    })\n                ","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, actions, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointmentPlus1\";\n\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\n\n\nconst { send, cancel } = actions\n\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\nconst REGION = 'northeurope';\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\n\nconst defaultPassivity = 10\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n\n        asrtts: {\n            initial: 'init',\n            states: {\n                init: {\n                    on: {\n                        CLICK: {\n                            target: 'getToken',\n                            actions: [\n                                assign({\n                                    audioCtx: (_ctx) =>\n                                        new ((window as any).AudioContext || (window as any).webkitAudioContext)()\n                                }),\n                                (context) =>\n                                    navigator.mediaDevices.getUserMedia({ audio: true })\n                                        .then(function(stream) { context.audioCtx.createMediaStreamSource(stream) })\n                            ]\n                        }\n                    }\n                },\n                getToken: {\n                    invoke: {\n                        id: \"getAuthorizationToken\",\n                        src: (_ctx, _evt) => getAuthorizationToken(),\n                        onDone: {\n                            actions: [\n                                assign((_context, event) => { return { azureAuthorizationToken: event.data } }),\n                                'ponyfillASR'],\n                            target: 'ponyfillTTS'\n                        },\n                        onError: {\n                            target: 'fail'\n                        }\n                    }\n                },\n                ponyfillTTS: {\n                    invoke: {\n                        id: 'ponyTTS',\n                        src: (context, _event) => (callback, _onReceive) => {\n                            const ponyfill = createSpeechSynthesisPonyfill({\n                                audioContext: context.audioCtx,\n                                credentials: {\n                                    region: REGION,\n                                    authorizationToken: context.azureAuthorizationToken,\n                                }\n                            });\n                            const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\n                            context.tts = speechSynthesis\n                            context.ttsUtterance = SpeechSynthesisUtterance\n                            context.tts.addEventListener('voiceschanged', () => {\n                                context.tts.cancel()\n                                const voices = context.tts.getVoices();\n                                let voiceRe = RegExp(\"en-US\", 'u')\n                                if (process.env.REACT_APP_TTS_VOICE) {\n                                    voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u')\n                                }\n                                const voice = voices.find((v: any) => voiceRe.test(v.name))!\n                                if (voice) {\n                                    context.voice = voice\n                                    callback('TTS_READY')\n                                } else {\n                                    console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`)\n                                    callback('TTS_ERROR')\n                                }\n                            })\n                        }\n                    },\n                    on: {\n                        TTS_READY: 'idle',\n                        TTS_ERROR: 'fail'\n                    }\n                },\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    },\n                },\n                recognising: {\n                    initial: 'noinput',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => {\n                                    return {\n                                        recResult: event.value\n                                    }\n                                })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle',\n                        SELECT: 'idle',\n                        CLICK: '.pause'\n                    },\n                    states: {\n                        noinput: {\n                            entry: [\n                                'recStart',\n                                send(\n                                    { type: 'TIMEOUT' },\n                                    { delay: (context) => (1000 * (context.tdmPassivity || defaultPassivity)), id: 'timeout' }\n                                )],\n                            on: {\n                                TIMEOUT: '#root.asrtts.idle',\n                                STARTSPEECH: 'inprogress'\n                            },\n                            exit: cancel('timeout')\n                        },\n                        inprogress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                        pause: {\n                            entry: 'recStop',\n                            on: { CLICK: 'noinput' }\n                        }\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                        SELECT: 'idle',\n                        CLICK: { target: 'idle', actions: send('ENDSPEECH') }\n                    },\n                    exit: 'ttsStop',\n                },\n                fail: {}\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"]);\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n    alternative: any;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    var promptText = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"name\") || {}).value;\n    var promptImage = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"image\") || {}).value;\n    var circleClass = \"circle\"\n    switch (true) {\n        case props.state.matches({ asrtts: 'fail' }) || props.state.matches({ dm: 'fail' }):\n            break;\n        case props.state.matches({ asrtts: { recognising: 'pause' } }):\n            promptText = \"Click to continue\"\n            break;\n        case props.state.matches({ asrtts: 'recognising' }):\n            circleClass = \"circle-recognising\"\n            promptText = promptText || 'Listening...'\n            break;\n        case props.state.matches({ asrtts: 'speaking' }):\n            circleClass = \"circle-speaking\"\n            promptText = promptText || 'Speaking...'\n            break;\n        case props.state.matches({ dm: 'idle' }):\n            promptText = \"Click to start!\"\n            circleClass = \"circle-click\"\n            break;\n        case props.state.matches({ dm: 'init' }):\n            promptText = \"Click to start!\"\n            circleClass = \"circle-click\"\n            break;\n        default:\n            promptText = promptText || '\\u00A0'\n    }\n    return (\n        <div className=\"control\">\n            <figure className=\"prompt\">\n                {promptImage &&\n                    <img src={promptImage}\n                        alt={promptText} />}\n            </figure>\n            <div className=\"status\">\n                <button type=\"button\" className={circleClass}\n                    style={{}} {...props}>\n                </button>\n                <div className=\"status-text\">\n                    {promptText}\n                </div>\n            </div>\n        </div>);\n}\n\nconst FigureButton = (props: Props): JSX.Element => {\n    const caption = props.alternative.find((el: any) => el.attribute === \"name\").value\n    const imageSrc = (props.alternative.find((el: any) => el.attribute === \"image\") || {}).value\n    return (\n        <figure className=\"flex\" {...props}>\n            {imageSrc &&\n                <img src={imageSrc} alt={caption} />}\n            <figcaption>{caption}</figcaption>\n        </figure>\n    )\n}\n\nfunction App() {\n    const [current, send] = useMachine(machine, {\n        devTools: true,\n        actions: {\n\n            changeColour: asEffect((context) => {\n                document.body.style.background = context.recResult[0].utterance;\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n\n            recStart: asEffect((context) => {\n                context.asr.start()\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n            recStop: asEffect((context) => {\n                context.asr.abort()\n                /* console.log('Recognition stopped.'); */\n            }),\n            ttsStart: asEffect((context) => {\n                let content = `<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:mstts=\"http://www.w3.org/2001/mstts\" xml:lang=\"en-US\"><voice name=\"${context.voice.name}\">`\n                content = content + (process.env.REACT_APP_TTS_LEXICON ? `<lexicon uri=\"${process.env.REACT_APP_TTS_LEXICON}\"/>` : \"\")\n                content = content + `${context.ttsAgenda}</voice></speak>`\n                console.debug(content)\n                const utterance = new context.ttsUtterance(content);\n                console.log(\"S>\", context.ttsAgenda)\n                utterance.voice = context.voice\n                utterance.onend = () => send('ENDSPEECH')\n                context.tts.speak(utterance)\n            }),\n            ttsStop: asEffect((context) => {\n                /* console.log('TTS STOP...'); */\n                context.tts.cancel()\n            }),\n            ponyfillASR: asEffect((context, _event) => {\n                const\n                    { SpeechRecognition }\n                        = createSpeechRecognitionPonyfill({\n                            audioContext: context.audioCtx,\n                            credentials: {\n                                region: REGION,\n                                authorizationToken: context.azureAuthorizationToken,\n                            }\n                        });\n                context.asr = new SpeechRecognition()\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\n                context.asr.continuous = true\n                context.asr.interimResults = true\n                context.asr.onresult = function(event: any) {\n                    var result = event.results[0]\n                    if (result.isFinal) {\n                        send({\n                            type: \"ASRRESULT\", value:\n                                [{\n                                    \"utterance\": result[0].transcript,\n                                    \"confidence\": result[0].confidence\n                                }]\n                        })\n                    } else {\n                        send({ type: \"STARTSPEECH\" });\n                    }\n                }\n\n            })\n        }\n    });\n    const figureButtons = (current.context.tdmExpectedAlternatives || []).filter((o: any) => o.visual_information)\n        .map(\n            (o: any, i: any) => (\n                <FigureButton state={current}\n                    alternative={o.visual_information}\n                    key={i}\n                    onClick={() => send({ type: 'SELECT', value: o.semantic_expression })} />\n            )\n        )\n\n    switch (true) {\n        default:\n            return (\n                <div className=\"App\">\n                    <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\n                    <div className=\"select-wrapper\">\n                        <div className=\"select\">\n                            {figureButtons}\n                        </div>\n                    </div>\n                </div>\n            )\n    }\n\n};\n\nconst getAuthorizationToken = () => (\n    fetch(new Request(TOKEN_ENDPOINT, {\n        method: 'POST',\n        headers: {\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\n        },\n    })).then(data => data.text()))\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}