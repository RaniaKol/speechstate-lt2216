{"version":3,"sources":["dmGame1.ts","index.tsx"],"names":["say","text","send","_context","type","value","grammar","question1","question2","question3","question4","question5","help_grammar","help","dmMachine","initial","states","idle","on","CLICK","init","TTS_READY","Help","help_message","entry","ENDSPEECH","Hello","hist","Hej","assign","counter","context","RECOGNISED","target","cond","recResult","utterance","actions","username","TIMEOUT","prompt0","prompt1","ask","nomatch","begin","intentid","prompt","yo","intent_info","invoke","id","src","event","fetch","Request","method","body","then","data","json","onDone","intent","name","onError","console","log","start","DONE","game_starts","try_again1","loose1","try_again2","loose2","try_again3","loose3","Win","cancel","REGION","inspect","url","iframe","machine","Machine","dm","asrtts","audioCtx","_ctx","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","stream","createMediaStreamSource","getToken","_evt","getAuthorizationToken","azureAuthorizationToken","ponyfillTTS","_event","callback","_onReceive","ponyfill","createSpeechSynthesisPonyfill","audioContext","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","process","voice","find","v","test","error","TTS_ERROR","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","SELECT","noinput","delay","tdmPassivity","STARTSPEECH","inprogress","match","pause","speaking","fail","recLogResult","logIntent","nluData","ReactiveButton","props","promptText","state","tdmVisualOutputInfo","el","attribute","promptImage","circleClass","matches","className","alt","style","FigureButton","caption","alternative","imageSrc","App","useMachine","devTools","changeColour","asEffect","document","background","recStart","asr","recStop","abort","ttsStart","content","REACT_APP_TTS_LEXICON","debug","onend","speak","ttsStop","ponyfillASR","SpeechRecognition","createSpeechRecognitionPonyfill","lang","continuous","interimResults","onresult","result","results","isFinal","transcript","confidence","current","figureButtons","tdmExpectedAlternatives","filter","o","visual_information","map","i","onClick","semantic_expression","headers","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.4afe2102.chunk.js","sourcesContent":["import { TIMEOUT } from \"dns\";\nimport { Context } from \"microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/RecognizerConfig\";\nimport { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\nconst rasaurl = 'https://intent-app1.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(rasaurl, {\n        method: 'POST',\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\n        // ****It takes some time for the rasa-app to wake up!****\n\nconst grammar: { [index: string]: { question1?: string, question2?: string, question3?: string, question4?:string, question5?:string,username?:string } } = {\n    \"Future.\": { question1: \"Correct\" },\n    \"The future.\": { question1: \"Correct\" },\n    \"Promise.\": { question2: \"Well done!\"},\n    \"A promise.\" : { question2: \"Well done!\"},\n    \"Secret.\" : { question3: \"Great!\"},\n    \"A secret.\" : { question3: \"Great!\"},\n    \"My name?\" : { question4: \"Correct\"},\n    \"Your name.\" : { question4: \"Correct\"},\n    \"Mirror.\" : { question5: \"Correct\"},\n    \"A mirror.\" : { question5: \"Correct\"}\n}\n\n\nconst help_grammar: { [index: string]: { help?: string} } = {\n    \"Help me.\":{help: \"help\"},\n    \"Help.\":{help:\"help\"},\n    \"I would like to help me\":{help:\"help\"}\n}\n\n// intents in rasa: (\n\n//- intent: affirm\n // examples: |\n  //- y\n  //- indeed\n  //- of course\n  //- that sounds good\n  //- correct\n  //- start\n  //- yes\n  //- Let's play\n  //- Go\n  //- Begin the game\n  //- sure\n  //- absolutely\n  //- yep\n  //- yeah \n  //- yes I want\n\n//- intent: deny\n//examples: |\n // - no\n // - n\n // - never\n  //- I don't think so\n  //- don't like that\n  //- no way\n  //- not really\n // - of course not\n // - absolutely not)\n\n\n export const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    \n    states: {\n        idle: {\n            on: {\n                CLICK: 'init'\n            }\n        },\n        init: {\n            on: {\n                TTS_READY: 'Hello',\n                CLICK: 'Hello'\n            }\n        },\n        Help: { \n            initial: 'help_message',\n            states: {\n                help_message: {\n                    entry: say(\"Welcome to the riddles. It is a mini game with 5 questions. In the first three questions you have two chances to answer if you make a mistake. If you want to win you have to answer all the questions correctly. Good luck!  \"),\n                    on: { ENDSPEECH: '#root.dm.Hello.hist' }, \n                }\n            }\n        },\n        Hello: {\n            initial: 'Hej',\n            states: {\n                hist: {\n                    type: 'history',\n                },\n                Hej: {\n                    initial: 'prompt0',\n                    entry: assign({counter: (context) => context.counter = 0}),\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.Help',\n                                cond: (context) => \"help\" in (help_grammar[context.recResult[0].utterance] || {})\n                            },\n                            {\n                                target: 'begin',\n                                \n                                actions: assign({ username: (context) => context.recResult[0].utterance }) \n                            },\n                            {\n                                target: '.nomatch'\n                            }\n                            ],\n                        TIMEOUT: [\n                            {\n                                target: '.prompt0',\n                                cond: (context) => context.counter === 0,\n                            },\n                            {\n                                target: '.prompt1',\n                                cond: (context) => context.counter === 1,\n                            },\n                            \n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => context.counter === 2,\n                            },\n                        ],\n                        },\n                    states: {\n                        hist: {\n                            type: 'history',\n                        },\n                        prompt0: {\n                            entry: [say(\"What is your name?\"), \n                                    assign({counter: (context) => context.counter +1})],\n                            on: { ENDSPEECH: 'ask' }\n                            },\n                        prompt1: {\n                            entry: [say(\"could you say your name?\"), \n                                    assign({counter: (context) => context.counter +1})],\n                            on: { ENDSPEECH: 'ask' }\n                            },\n                        ask: {\n                                entry: send('LISTEN'),\n                            },\n                        nomatch: {\n                            entry: say(\"Sorry, could you repeat?\"),\n                            on: { ENDSPEECH: 'ask' }\n                            }\n                        }\n                    },\n            begin: {\n                initial: 'prompt',\n                entry: assign({counter: (context) => context.counter = 0}),\n                on: {\n                    RECOGNISED: [\n                        {\n                            target: '#root.dm.Help',\n                            cond: (context) => \"help\" in (help_grammar[context.recResult[0].utterance] || {}),\n                        },\n                        {target: 'intent_info',\n                       \n                       actions: assign({ intentid: (context) => context.recResult[0].utterance })},\n\n                        \n                        {\n                            target: '.nomatch'\n                        }\n                        ],\n                    TIMEOUT: [\n                        {\n                            target: '.prompt',\n                            cond: (context) => context.counter === 0,\n                        },\n                        {\n                            target: '#root.dm.init',\n                            cond: (context) => context.counter === 1,\n                        },\n                    ],\n                },\n                states: {\n                    prompt: {\n                        entry: send((context) => ({\n                            type: 'SPEAK',\n                            value: `Hi ${context.username}`\n                        })),\n                        on: { ENDSPEECH: 'ask' },\n                    },\n                    ask: {\n                        entry: [say(\"Would you like to play a game?\"), assign({counter: (context) => context.counter + 1})],\n                        on: { ENDSPEECH: 'yo'}\n                    },\n                    yo: {\n                        entry: send('LISTEN'),\n                    },\n                    nomatch: {\n                        entry: say(\"Sorry, I didn't understand that.\"),\n                        on: { ENDSPEECH: 'ask' }\n                    }\n                }\n            },\n            \n            intent_info: {\n                invoke: {\n                    id: 'intenDId',\n                    src: (context, event) => nluRequest(context.recResult[0].utterance),\n                    onDone: {\n                        target: 'start',\n                        actions: [\n                        assign((context, event) => { return { intentid: event.data.intent.name } }),\n                        send('DONE')\n                            ],\n                    },\n                    onError: {\n                        target: 'Hej',\n                        actions: [(context,event) => console.log(event.data)]\n                        \n                    }\n                }\n            },\n            \n            start: {\n                \n                on: { \n                    DONE: [{\n                        cond: (context: { intentid: string; }) => \"affirm\" === context.intentid,\n                        actions: (context:SDSContext) => console.log( context.intentid),\n                        target: 'game_starts',\n                    },\n                    {\n                        cond: (context: { intentid: string; }) => \"deny\" === context.intentid,\n                        actions: (context:SDSContext) => console.log( context.intentid),\n                        target: 'begin',\n                    },\n                    {\n                        \n                        target: '.nomatch',\n                    }]\n                },\n                states:{\n                    nomatch: {\n                        entry: say(\"Sorry I didn't catch that\"),\n                        on: { ENDSPEECH: '#root.dm.Help' },\n                    },\n                    \n                }\n            },\n            game_starts: {\n                initial: 'prompt0',\n                entry: assign({counter: (context) => context.counter = 0}),\n                on: {\n                    RECOGNISED: [\n                        {target: '#root.dm.Help',\n                            cond: (context) => \"help\" in (help_grammar[context.recResult[0].utterance] || {}),\n                        },\n                        {target: 'question2',\n                        cond: (context) => \"question1\" in (grammar[context.recResult[0].utterance] || {}),\n                        actions: assign((context) => { return { question1: grammar[context.recResult[0].utterance].question1! }}),\n\n                    },\n                    {target: 'try_again1',\n                    cond: (context) => \"question1\" in (grammar[context.recResult[0].utterance] || {}) !== grammar[context.recResult[0].utterance],\n                        \n                },\n                        ],\n                    TIMEOUT: [\n                        {\n                            target: '.prompt0',\n                            cond: (context) => context.counter === 0,\n                        },\n                        {\n                            target: '.prompt1',\n                            cond: (context) => context.counter === 1,\n                        },\n                        \n                        {\n                            target: '#root.dm.init',\n                            cond: (context) => context.counter === 2,\n                        },\n                    ],\n                },\n                states: {\n                    prompt0: {\n                        entry: [say(\"Ok, let's start with the first question. What is always in front of you but can't be seen?\"), assign({counter: (context) => context.counter + 1})],\n                        on: { ENDSPEECH: 'ask' }\n                    },\n                    prompt1: {\n                        entry: [say(\"What is always in front of you but can't be seen?\"), assign({counter: (context) => context.counter + 1})],\n                        on: { ENDSPEECH: 'ask' }\n                        \n                    },\n                    \n                    ask: {\n                        entry: send('LISTEN'),\n                         \n                    },\n                }\n            },\n            try_again1: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [{\n                target: '#root.dm.Help',\n                cond: (context) => \"help\" in (help_grammar[context.recResult[0].utterance] || {}),\n                        },\n                    {\n                 target: 'question2', \n                 cond: (context) =>\"question1\" in (grammar[context.recResult[0].utterance] || {}),\n                 actions: assign((context) => { return { question1: grammar[context.recResult[0].utterance].question1! }})},\n                  \n                 \n                 {target: '.loose1'},\n                \n            ],\n            TIMEOUT: [\n                {target: '.prompt'}\n            ],\n                \n\n        },\n        states: {\n            prompt: {\n                entry: say( `Maybe you have to think a little bit more! Try again! What is always in front of you but can't be seen??`), \n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN'),\n            },\n            \n            \n            loose1: {\n                 entry: say(\"sorry, you lost!\")}\n                }\n            },\n            question2: {\n                initial: 'prompt0',\n                entry: assign({counter: (context) => context.counter = 0}),\n                on: {\n                    RECOGNISED: [\n                        {target: '#root.dm.Help',\n                            cond: (context) => \"help\" in (help_grammar[context.recResult[0].utterance] || {}),\n                        },\n                        {target: 'question3',\n                        cond: (context) => \"question2\" in (grammar[context.recResult[0].utterance] || {}),\n                        actions: assign((context) => { return { question2: grammar[context.recResult[0].utterance].question2! }}),\n            \n                    },\n                    {target: 'try_again2',\n                    cond: (context) => \"question2\" in (grammar[context.recResult[0].utterance] || {}) !== grammar[context.recResult[0].utterance],\n                        \n                },\n                        ],\n                    TIMEOUT: [\n                        {\n                            target: '.prompt0',\n                            cond: (context) => context.counter === 0,\n                        },\n                        {\n                            target: '.prompt1',\n                            cond: (context) => context.counter === 1,\n                        },\n                        \n                        {\n                            target: '#root.dm.init',\n                            cond: (context) => context.counter === 2,\n                        },\n                    ],\n                },\n                states: {\n                    prompt0: {\n                        entry: [say(`You have answered correct the first question. Let's move on on the second. What can you break, even if you never pick it up or touch it?`), assign({counter: (context) => context.counter + 1})],\n                        on: { ENDSPEECH: 'ask' }\n                    },\n                    prompt1: {\n                        entry: [say('What can you break, even if you never pick it up or touch it?'), assign({counter: (context) => context.counter + 1})],\n                        on: { ENDSPEECH: 'ask' }\n                        \n                    },\n                    \n                    ask: {\n                        entry: send('LISTEN'),\n                         \n                    },\n                }\n            },\n            try_again2: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [{\n                target: '#root.dm.Help',\n                cond: (context) => \"help\" in (help_grammar[context.recResult[0].utterance] || {}),\n                        },\n                    {\n                 target: 'question3', \n                 cond: (context) =>\"question2\" in (grammar[context.recResult[0].utterance] || {}),\n                 actions: assign((context) => { return { question2: grammar[context.recResult[0].utterance].question2! }})},\n                  \n                 \n                 {target: '.loose2'},\n                \n            ],\n            TIMEOUT: [\n                {target: '.prompt'}\n            ],\n                \n            \n            },\n            states: {\n            prompt: {\n                entry: say( `Your answer is wrong! You have one more chance. What can you break, even if you never pick it up or touch it?`), \n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN'),\n            },\n            \n            \n            loose2: {\n                 entry: say(\"sorry, you lost!\")}\n                }\n            },\n            question3: {\n                initial: 'prompt0',\n                entry: assign({counter: (context) => context.counter = 0}),\n                on: {\n                    RECOGNISED: [\n                        {target: '#root.dm.Help',\n                            cond: (context) => \"help\" in (help_grammar[context.recResult[0].utterance] || {}),\n                        },\n                        {target: 'question4',\n                        cond: (context) => \"question3\" in (grammar[context.recResult[0].utterance] || {}),\n                        actions: assign((context) => { return { question3: grammar[context.recResult[0].utterance].question3! }}),\n            \n                    },\n                    {target: 'try_again3',\n                    cond: (context) => \"question3\" in (grammar[context.recResult[0].utterance] || {}) !== grammar[context.recResult[0].utterance],\n                        \n                },\n                        ],\n                    TIMEOUT: [\n                        {\n                            target: '.prompt0',\n                            cond: (context) => context.counter === 0,\n                        },\n                        {\n                            target: '.prompt1',\n                            cond: (context) => context.counter === 1,\n                        },\n                        \n                        {\n                            target: '#root.dm.init',\n                            cond: (context) => context.counter === 2,\n                        },\n                    ],\n                },\n                states: {\n                    prompt0: {\n                        entry: [say(\"Correct! Question3. If you've got me, you want to share me; if you share me, you haven't kept me. What am I?\"), assign({counter: (context) => context.counter + 1})],\n                        on: { ENDSPEECH: 'ask' }\n                    },\n                    prompt1: {\n                        entry: [say(\"If you've got me, you want to share me; if you share me, you haven't kept me. What am I? What is your answer?\"), assign({counter: (context) => context.counter + 1})],\n                        on: { ENDSPEECH: 'ask' }\n                        \n                    },\n                    \n                    ask: {\n                        entry: send('LISTEN'),\n                         \n                    },\n                }\n            },\n            try_again3: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [{\n                target: '#root.dm.Help',\n                cond: (context) => \"help\" in (help_grammar[context.recResult[0].utterance] || {}),\n                        },\n                    {\n                 target: 'question4', \n                 cond: (context) =>\"question3\" in (grammar[context.recResult[0].utterance] || {}),\n                 actions: assign((context) => { return { question3: grammar[context.recResult[0].utterance].question3! }})},\n                  \n                 \n                 {target: '.loose3'},\n                \n            ],\n            TIMEOUT: [\n                {target: '.prompt'}\n            ],\n                \n            \n            },\n            states: {\n            prompt: {\n                entry: say( \"The answer is wrong! Listen to the question one more time. If you've got me, you want to share me; if you share me, you haven't kept me. What am I?\"), \n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN'),\n            },\n            \n            \n            loose3: {\n                 entry: say(\"sorry, you lost!\")}\n                }\n            },\n            question4: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [{\n                        target: '#root.dm.Help',\n                        cond: (context) => \"help\" in (help_grammar[context.recResult[0].utterance] || {}),\n                                },\n                            {\n                         target: 'question5', \n                         cond: (context) =>\"question4\" in (grammar[context.recResult[0].utterance] || {}),\n                         actions: assign((context) => { return { question4: grammar[context.recResult[0].utterance].question4! }})},\n                    \n                        { target: \".nomatch\" }\n                    ]\n                },\n                   \n                states: {\n                    prompt: {\n                        entry: send((context) => ({\n                            type: \"SPEAK\",\n                            value: `${context.question3} .For the rest two answers you have only one chance to answer correct. So, let's move on. Question 4. It belongs to you, but other people use it more than you do. What is it?`\n                        })),\n                        on: { ENDSPEECH: \"ask\" }\n                    },\n                    ask: {\n                        entry:send('LISTEN')\n                    },\n                    nomatch: {\n                        entry: say(\"Sorry you lost.\"),\n                        \n                    }\n                }\n            },\n            question5: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [{\n                        target: '#root.dm.Help',\n                        cond: (context) => \"help\" in (help_grammar[context.recResult[0].utterance] || {}),\n                                },\n                            {\n                         target: 'Win', \n                         cond: (context) =>\"question5\" in (grammar[context.recResult[0].utterance] || {}),\n                         actions: assign((context) => { return { question5: grammar[context.recResult[0].utterance].question5! }})},\n                          \n                         \n                        { target: \".nomatch\" }\n                    ],\n                    \n                \n    \n                },\n                states: {\n                    prompt: {\n                        entry: [send((context) => ({\n                            type: 'SPEAK',\n                            value: `You have answered ${context.question4} the fourth question. What a genius! Now it's time for the last one. If you drop me I'm sure to crack, but give me a smile and I'll always smile back. What am I?`\n                        })),\n                        assign({counter: (context) => context.counter + 1})],\n                        on: { ENDSPEECH: 'ask' }\n                    },\n                    prompt1: {\n                        entry: [send((context) => ({\n                            type: 'SPEAK',\n                            value: ` What can you break, even if you never pick it up or touch it?`\n                        })),\n                        assign({counter: (context) => context.counter + 1})],\n                        on: { ENDSPEECH: 'ask' }\n                    },\n                    \n                        \n                    \n                    ask: {\n                        entry: send('LISTEN'),\n                    },\n                    nomatch: {\n                        entry: say(\" You have answered incorrectly! You lost!\")}\n                    }\n                },\n            \n                Win: {\n                    initial: \"prompt\",\n                        states: {\n                            prompt: { entry: say(\"Congratulations, you won!\")}\n                        }\n                    }\n                }\n            }\n        }\n    })","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, actions, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmGame1\";\n\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\n\n\nconst { send, cancel } = actions\n\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\nconst REGION = 'northeurope';\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\n\nconst defaultPassivity = 20\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n\n        asrtts: {\n            initial: 'init',\n            states: {\n                init: {\n                    on: {\n                        CLICK: {\n                            target: 'getToken',\n                            actions: [\n                                assign({\n                                    audioCtx: (_ctx) =>\n                                        new ((window as any).AudioContext || (window as any).webkitAudioContext)()\n                                }),\n                                (context) =>\n                                    navigator.mediaDevices.getUserMedia({ audio: true })\n                                        .then(function(stream) { context.audioCtx.createMediaStreamSource(stream) })\n                            ]\n                        }\n                    }\n                },\n                getToken: {\n                    invoke: {\n                        id: \"getAuthorizationToken\",\n                        src: (_ctx, _evt) => getAuthorizationToken(),\n                        onDone: {\n                            actions: [\n                                assign((_context, event) => { return { azureAuthorizationToken: event.data } }),\n                                'ponyfillASR'],\n                            target: 'ponyfillTTS'\n                        },\n                        onError: {\n                            target: 'fail'\n                        }\n                    }\n                },\n                ponyfillTTS: {\n                    invoke: {\n                        id: 'ponyTTS',\n                        src: (context, _event) => (callback, _onReceive) => {\n                            const ponyfill = createSpeechSynthesisPonyfill({\n                                audioContext: context.audioCtx,\n                                credentials: {\n                                    region: REGION,\n                                    authorizationToken: context.azureAuthorizationToken,\n                                }\n                            });\n                            const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\n                            context.tts = speechSynthesis\n                            context.ttsUtterance = SpeechSynthesisUtterance\n                            context.tts.addEventListener('voiceschanged', () => {\n                                context.tts.cancel()\n                                const voices = context.tts.getVoices();\n                                let voiceRe = RegExp(\"en-US\", 'u')\n                                if (process.env.REACT_APP_TTS_VOICE) {\n                                    voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u')\n                                }\n                                const voice = voices.find((v: any) => voiceRe.test(v.name))!\n                                if (voice) {\n                                    context.voice = voice\n                                    callback('TTS_READY')\n                                } else {\n                                    console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`)\n                                    callback('TTS_ERROR')\n                                }\n                            })\n                        }\n                    },\n                    on: {\n                        TTS_READY: 'idle',\n                        TTS_ERROR: 'fail'\n                    }\n                },\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    },\n                },\n                recognising: {\n                    initial: 'noinput',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => {\n                                    return {\n                                        recResult: event.value\n                                    }\n                                })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle',\n                        SELECT: 'idle',\n                        CLICK: '.pause'\n                    },\n                    states: {\n                        noinput: {\n                            entry: [\n                                'recStart',\n                                send(\n                                    { type: 'TIMEOUT' },\n                                    { delay: (context) => (2000 * (context.tdmPassivity || defaultPassivity)), id: 'timeout' }\n                                )],\n                            on: {\n                                TIMEOUT: '#root.asrtts.idle',\n                                STARTSPEECH: 'inprogress'\n                            },\n                            exit: cancel('timeout')\n                        },\n                        inprogress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                        pause: {\n                            entry: 'recStop',\n                            on: { CLICK: 'noinput' }\n                        }\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                        SELECT: 'idle',\n                        CLICK: { target: 'idle', actions: send('ENDSPEECH') }\n                    },\n                    exit: 'ttsStop',\n                },\n                fail: {}\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"]);\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n    alternative: any;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    var promptText = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"name\") || {}).value;\n    var promptImage = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"image\") || {}).value;\n    var circleClass = \"circle\"\n    switch (true) {\n        case props.state.matches({ asrtts: 'fail' }) || props.state.matches({ dm: 'fail' }):\n            break;\n        case props.state.matches({ asrtts: { recognising: 'pause' } }):\n            promptText = \"Click to continue\"\n            break;\n        case props.state.matches({ asrtts: 'recognising' }):\n            circleClass = \"circle-recognising\"\n            promptText = promptText || 'Listening...'\n            break;\n        case props.state.matches({ asrtts: 'speaking' }):\n            circleClass = \"circle-speaking\"\n            promptText = promptText || 'Speaking...'\n            break;\n        case props.state.matches({ dm: 'idle' }):\n            promptText = \"Click to start!\"\n            circleClass = \"circle-click\"\n            break;\n        case props.state.matches({ dm: 'init' }):\n            promptText = \"Click to start!\"\n            circleClass = \"circle-click\"\n            break;\n        default:\n            promptText = promptText || '\\u00A0'\n    }\n    return (\n        <div className=\"control\">\n            <figure className=\"prompt\">\n                {promptImage &&\n                    <img src={promptImage}\n                        alt={promptText} />}\n            </figure>\n            <div className=\"status\">\n                <button type=\"button\" className={circleClass}\n                    style={{}} {...props}>\n                </button>\n                <div className=\"status-text\">\n                    {promptText}\n                </div>\n            </div>\n        </div>);\n}\n\nconst FigureButton = (props: Props): JSX.Element => {\n    const caption = props.alternative.find((el: any) => el.attribute === \"name\").value\n    const imageSrc = (props.alternative.find((el: any) => el.attribute === \"image\") || {}).value\n    return (\n        <figure className=\"flex\" {...props}>\n            {imageSrc &&\n                <img src={imageSrc} alt={caption} />}\n            <figcaption>{caption}</figcaption>\n        </figure>\n    )\n}\n\nfunction App() {\n    const [current, send] = useMachine(machine, {\n        devTools: true,\n        actions: {\n\n            changeColour: asEffect((context) => {\n                document.body.style.background = context.recResult[0].utterance;\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n\n            recStart: asEffect((context) => {\n                context.asr.start()\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n            recStop: asEffect((context) => {\n                context.asr.abort()\n                /* console.log('Recognition stopped.'); */\n            }),\n            ttsStart: asEffect((context) => {\n                let content = `<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:mstts=\"http://www.w3.org/2001/mstts\" xml:lang=\"en-US\"><voice name=\"${context.voice.name}\">`\n                content = content + (process.env.REACT_APP_TTS_LEXICON ? `<lexicon uri=\"${process.env.REACT_APP_TTS_LEXICON}\"/>` : \"\")\n                content = content + `${context.ttsAgenda}</voice></speak>`\n                console.debug(content)\n                const utterance = new context.ttsUtterance(content);\n                console.log(\"S>\", context.ttsAgenda)\n                utterance.voice = context.voice\n                utterance.onend = () => send('ENDSPEECH')\n                context.tts.speak(utterance)\n            }),\n            ttsStop: asEffect((context) => {\n                /* console.log('TTS STOP...'); */\n                context.tts.cancel()\n            }),\n            ponyfillASR: asEffect((context, _event) => {\n                const\n                    { SpeechRecognition }\n                        = createSpeechRecognitionPonyfill({\n                            audioContext: context.audioCtx,\n                            credentials: {\n                                region: REGION,\n                                authorizationToken: context.azureAuthorizationToken,\n                            }\n                        });\n                context.asr = new SpeechRecognition()\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\n                context.asr.continuous = true\n                context.asr.interimResults = true\n                context.asr.onresult = function(event: any) {\n                    var result = event.results[0]\n                    if (result.isFinal) {\n                        send({\n                            type: \"ASRRESULT\", value:\n                                [{\n                                    \"utterance\": result[0].transcript,\n                                    \"confidence\": result[0].confidence\n                                }]\n                        })\n                    } else {\n                        send({ type: \"STARTSPEECH\" });\n                    }\n                }\n\n            })\n        }\n    });\n    const figureButtons = (current.context.tdmExpectedAlternatives || []).filter((o: any) => o.visual_information)\n        .map(\n            (o: any, i: any) => (\n                <FigureButton state={current}\n                    alternative={o.visual_information}\n                    key={i}\n                    onClick={() => send({ type: 'SELECT', value: o.semantic_expression })} />\n            )\n        )\n\n    switch (true) {\n        default:\n            return (\n                <div className=\"App\">\n                    <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\n                    <div className=\"select-wrapper\">\n                        <div className=\"select\">\n                            {figureButtons}\n                        </div>\n                    </div>\n                </div>\n            )\n    }\n\n};\n\nconst getAuthorizationToken = () => (\n    fetch(new Request(TOKEN_ENDPOINT, {\n        method: 'POST',\n        headers: {\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\n        },\n    })).then(data => data.text()))\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}