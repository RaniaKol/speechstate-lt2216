{"version":3,"sources":["dmGame1.ts","index.tsx"],"names":["say","text","send","_context","type","value","grammar","question1","question2","question3","question4","question5","yes_nogrammar","yes_no","help","dmMachine","initial","states","idle","on","CLICK","init","TTS_READY","Help","help_message","entry","ENDSPEECH","Hello","hist","Hej","assign","counter","context","RECOGNISED","target","cond","recResult","utterance","actions","username","TIMEOUT","prompt0","prompt1","ask","nomatch","begin","prompt","yo","game_starts","ask1","ask2","nomatch1","loose","loose1","loose2","Win","cancel","REGION","inspect","url","iframe","machine","Machine","id","dm","asrtts","audioCtx","_ctx","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","then","stream","createMediaStreamSource","getToken","invoke","src","_evt","getAuthorizationToken","onDone","event","azureAuthorizationToken","data","onError","ponyfillTTS","_event","callback","_onReceive","ponyfill","createSpeechSynthesisPonyfill","audioContext","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","process","voice","find","v","test","name","console","error","TTS_ERROR","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","SELECT","noinput","delay","tdmPassivity","STARTSPEECH","inprogress","match","pause","speaking","fail","recLogResult","log","logIntent","nluData","intent","ReactiveButton","props","promptText","state","tdmVisualOutputInfo","el","attribute","promptImage","circleClass","matches","className","alt","style","FigureButton","caption","alternative","imageSrc","App","useMachine","devTools","changeColour","asEffect","document","body","background","recStart","asr","start","recStop","abort","ttsStart","content","REACT_APP_TTS_LEXICON","debug","onend","speak","ttsStop","ponyfillASR","SpeechRecognition","createSpeechRecognitionPonyfill","lang","continuous","interimResults","onresult","result","results","isFinal","transcript","confidence","current","figureButtons","tdmExpectedAlternatives","filter","o","visual_information","map","i","onClick","semantic_expression","fetch","Request","method","headers","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.632ac84c.chunk.js","sourcesContent":["import { TIMEOUT } from \"dns\";\nimport { Context } from \"microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/RecognizerConfig\";\nimport { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\nconst kbRequest = (text: string) =>\n    fetch(new Request(`https://cors.eu.org/https://api.duckduckgo.com/?q=${text}&format=json&skip_disambig=1`)).then(data => data.json())\n\nconst grammar: { [index: string]: { question1?: string, question2?: string, question3?: string, question4?:string, question5?:string,username?:string } } = {\n    \"Future.\": { question1: \"Correct\" },\n    \"The future.\": { question1: \"Correct\" },\n    \"Promise.\": { question2: \"Well done!\"},\n    \"A promise.\" : { question2: \"Well done!\"},\n    \"Secret.\" : { question3: \"That's correct.\"},\n    \"A secret.\" : { question3: \"That's correct.\"},\n    \"My name.\" : { question4: \"Correct\"},\n    \"Your name.\" : { question4: \"Correct\"},\n    \"Mirror.\" : { question5: \"Correct\"},\n    \"A mirror.\" : { question5: \"Correct\"}\n\n\n    \n    \n}\n\nconst yes_nogrammar: { [index: string]: { yes_no?: string, help?: string} } = {\n    \"Yes.\": { yes_no: \"yes\"},\n    \"Of course.\": { yes_no: \"yes\"},\n    \"Sure.\": { yes_no: \"yes\"},\n    \"Absolutely.\": { yes_no: \"yes\"},\n    \"No.\": { yes_no: \"no\"},\n    \"No way.\": { yes_no: \"no\"},\n    \"Of course not.\": { yes_no: \"no\"},\n    \"Absolutely not.\": { yes_no: \"no\"},\n    \"Help me.\":{help: \"help\"},\n    \"Help.\":{help:\"help\"},\n    \"I would like to help me\":{help:\"help\"}\n}\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    \n    states: {\n        idle: {\n            on: {\n                CLICK: 'init'\n            }\n        },\n        init: {\n            on: {\n                TTS_READY: 'Hello',\n                CLICK: 'Hello'\n            }\n        },\n        Help: { \n            initial: 'help_message',\n            states: {\n                help_message: {\n                    entry: say(\"Welcome to the riddles. It is a mini game with 5 questions. In the first three questions you have two chances to answer if you make a mistake. If you want to win you have to answer all the questions correctly. Good luck!  \"),\n                    on: { ENDSPEECH: '#root.dm.Hello.hist' }, \n                }\n            }\n        },\n        Hello: {\n            initial: 'Hej',\n            states: {\n                hist: {\n                    type: 'history',\n                },\n                Hej: {\n                    initial: 'prompt0',\n                    entry: assign({counter: (context) => context.counter = 0}),\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.Help',\n                                cond: (context) => \"help\" in (yes_nogrammar[context.recResult[0].utterance] || {})\n                            },\n                            {\n                                target: 'begin',\n                                \n                                actions: assign({ username: (context) => context.recResult[0].utterance }) \n                            },\n                            {\n                                target: '.nomatch'\n                            }\n                            ],\n                        TIMEOUT: [\n                            {\n                                target: '.prompt0',\n                                cond: (context) => context.counter === 0,\n                            },\n                            {\n                                target: '.prompt1',\n                                cond: (context) => context.counter === 1,\n                            },\n                            \n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => context.counter === 2,\n                            },\n                        ],\n                        },\n                    states: {\n                        hist: {\n                            type: 'history',\n                        },\n                        prompt0: {\n                            entry: [say(\"What is your name?\"), \n                                    assign({counter: (context) => context.counter +1})],\n                            on: { ENDSPEECH: 'ask' }\n                            },\n                        prompt1: {\n                            entry: [say(\"could you say your name?\"), \n                                    assign({counter: (context) => context.counter +1})],\n                            on: { ENDSPEECH: 'ask' }\n                            },\n                        ask: {\n                                entry: send('LISTEN'),\n                            },\n                        nomatch: {\n                            entry: say(\"Sorry, could you repeat?\"),\n                            on: { ENDSPEECH: 'ask' }\n                            }\n                        }\n                    },\n            begin: {\n                initial: 'prompt',\n                entry: assign({counter: (context) => context.counter = 0}),\n                on: {\n                    RECOGNISED: [\n                        {\n                            target: '#root.dm.Help',\n                            cond: (context) => \"help\" in (yes_nogrammar[context.recResult[0].utterance] || {}),\n                        },\n                        {\n                            target: 'game_starts',\n                            cond: (context) => \"yes_no\" in (yes_nogrammar[context.recResult[0].utterance] || {}) && yes_nogrammar[context.recResult[0].utterance].yes_no === 'yes',\n                            \n                        },\n                        {\n                            target: 'Hej',\n                            cond: (context) => \"yes_no\" in (yes_nogrammar[context.recResult[0].utterance] || {}) && yes_nogrammar[context.recResult[0].utterance].yes_no === 'no',\n                            \n                        },\n                        {\n                            target: '.nomatch'\n                        }\n                        ],\n                    TIMEOUT: [\n                        {\n                            target: '.prompt',\n                            cond: (context) => context.counter === 0,\n                        },\n                        {\n                            target: '#root.dm.init',\n                            cond: (context) => context.counter === 1,\n                        },\n                    ],\n                },\n                states: {\n                    prompt: {\n                        entry: send((context) => ({\n                            type: 'SPEAK',\n                            value: `Hi ${context.username}`\n                        })),\n                        on: { ENDSPEECH: 'ask' },\n                    },\n                    ask: {\n                        entry: [say(\"Would you like to play a game?\"), assign({counter: (context) => context.counter + 1})],\n                        on: { ENDSPEECH: 'yo'}\n                    },\n                    yo: {\n                        entry: send('LISTEN'),\n                    },\n                    nomatch: {\n                        entry: say(\"Sorry, I didn't understand that.\"),\n                        on: { ENDSPEECH: 'ask' }\n                    }\n                }\n            },\n            game_starts: {\n                initial: 'prompt0',\n                entry: assign({counter: (context) => context.counter = 0}),\n                on: {\n                    RECOGNISED: [\n                        {target: '#root.dm.Help',\n                            cond: (context) => \"help\" in (yes_nogrammar[context.recResult[0].utterance] || {}),\n                        },\n                        {target: 'question2',\n                        cond: (context) => \"question1\" in (grammar[context.recResult[0].utterance] || {}),\n                        actions: assign((context) => { return { question1: grammar[context.recResult[0].utterance].question1! }}),\n                    },\n                        \n                        {target: '.nomatch',\n                        cond: (context) => context.counter === 1},\n                        {target: '.nomatch1',\n                        cond: (context) => context.counter === 2}\n\n                        ],\n                    TIMEOUT: [\n                        {\n                            target: '.prompt0',\n                            cond: (context) => context.counter === 0,\n                        },\n                        {\n                            target: '.prompt1',\n                            cond: (context) => context.counter === 1,\n                        },\n                        \n                        {\n                            target: '#root.dm.init',\n                            cond: (context) => context.counter === 2,\n                        },\n                    ],\n                },\n                states: {\n                    prompt0: {\n                        entry: [say(\"Ok, let's start with the first question. What is always in front of you but can't be seen?\"), assign({counter: (context) => context.counter + 1})],\n                        on: { ENDSPEECH: 'ask1' }\n                    },\n                    prompt1: {\n                        entry: [say(\"What is always in front of you but can't be seen?\"), assign({counter: (context) => context.counter + 1})],\n                        on: { ENDSPEECH: 'ask2' }\n                        \n                    },\n                    \n                    ask1: {\n                        entry: send('LISTEN'),\n                        \n                    },\n                    \n                    ask2: {\n                        entry: send('LISTEN'),\n                        \n                    },\n                    \n                    nomatch: {\n                        entry: [say(\"Sorry, your answer is wrong! You have one more chance.\"), assign({counter: (context) => context.counter })],\n                        on: { ENDSPEECH: 'prompt1' }\n                    },\n                    nomatch1:{\n                        entry: [say(\"Your answer is wrong!\"), assign({counter: (context) => context.counter + 1})],\n                        on: { ENDSPEECH: 'loose' }\n                    },\n                    loose: {\n                         entry: say(\"sorry, you have lost!\"),\n                         \n                        }   \n                }\n            },\n            question2: {\n                initial: \"prompt0\",\n                on: {\n                    RECOGNISED: [{\n                        target: '#root.dm.Help',\n                        cond: (context) => \"help\" in (yes_nogrammar[context.recResult[0].utterance] || {}),\n                                },\n                            {\n                         target: 'question3', \n                         cond: (context) =>\"question2\" in (grammar[context.recResult[0].utterance] || {}),\n                         actions: assign((context) => { return { question2: grammar[context.recResult[0].utterance].question2! }})},\n                          \n                         \n                         {target: '.nomatch',\n                         cond: (context) => context.counter === 1},\n                         {target: '.nomatch1',\n                         cond: (context) => context.counter === 2}\n                    ],\n                    TIMEOUT: [\n                        {\n                            target: '.prompt0',\n                            cond: (context) => context.counter === 0,\n                        },\n                        {\n                            target: '.prompt1',\n                            cond: (context) => context.counter === 1,\n                        },\n                        \n                        {\n                            target: '#root.dm.init',\n                            cond: (context) => context.counter === 2,\n                        },\n                    ],\n                \n    \n                },\n                states: {\n                    prompt0: {\n                        entry: [send((context) => ({\n                            type: 'SPEAK',\n                            value: `You have answered ${context.question1} the first question. Let's move on on the second. What can you break, even if you never pick it up or touch it?`\n                        })),\n                        assign({counter: (context) => context.counter })],\n                        on: { ENDSPEECH: 'ask1' }\n                    },\n                    prompt1: {\n                        entry: [send((context) => ({\n                            type: 'SPEAK',\n                            value: ` What can you break, even if you never pick it up or touch it?`\n                        })),\n                        assign({counter: (context) => context.counter + 1})],\n                        on: { ENDSPEECH: 'ask2' }\n                    },\n                    \n                    ask1: {\n                        entry: send('LISTEN'),\n                    },\n                    ask2: {\n                        entry: send('LISTEN'),\n                        \n                    },\n                    nomatch: {\n                        entry: [say(\"Sorry you have answered incorrectly! Try again!\"), assign({counter: (context) => context.counter })],\n                        on: { ENDSPEECH: 'prompt1' }\n                    },\n                    nomatch1: {\n                        entry: [say(\"You have answered incorrectly!\"), assign({counter: (context) => context.counter + 1})],\n                        on: { ENDSPEECH: 'loose1' }\n                    },\n                    \n                    loose1: {\n                         entry: say(\"sorry, you have lost!\"),\n                            \n                        }\n                    }\n            },\n            question3: {\n                initial: \"prompt0\",\n                on: {\n                    RECOGNISED: [{\n                        target: '#root.dm.Help',\n                        cond: (context) => \"help\" in (yes_nogrammar[context.recResult[0].utterance] || {}),\n                                },\n                            {\n                         target: 'question4', \n                         cond: (context) =>\"question3\" in (grammar[context.recResult[0].utterance] || {}),\n                         actions: assign((context) => { return { question3: grammar[context.recResult[0].utterance].question3! }})},\n                          \n                         \n                         {target: '.nomatch',\n                         cond: (context) => context.counter === 1},\n                         {target: '.nomatch1',\n                         cond: (context) => context.counter === 2}\n                    ],\n                    TIMEOUT: [\n                        {\n                            target: '.prompt0',\n                            cond: (context) => context.counter === 0,\n                        },\n                        {\n                            target: '.prompt1',\n                            cond: (context) => context.counter === 1,\n                        },\n                        \n                        {\n                            target: '#root.dm.init',\n                            cond: (context) => context.counter === 2,\n                        },\n                    ],\n                \n    \n                },\n                states: {\n                    prompt0: {\n                        entry: [send((context) => ({\n                            type: 'SPEAK',\n                            value: ` ${context.question2}. Question3. If you've got me, you want to share me; if you share me, you haven't kept me. What am I?`\n                        })),\n                        assign({counter: (context) => context.counter + 1})],\n                        on: { ENDSPEECH: 'ask1' }\n                    },\n                    prompt1: {\n                        entry: [send((context) => ({\n                            type: 'SPEAK',\n                            value: ` If you've got me, you want to share me; if you share me, you haven't kept me. What am I?`\n                        })),\n                        assign({counter: (context) => context.counter + 1})],\n                        on: { ENDSPEECH: 'ask2' }\n                    },\n                    \n                    ask1: {\n                        entry: send('LISTEN'),\n                    },\n\n                    ask2: {\n                        entry: send('LISTEN'),\n                    },\n                    nomatch: {\n                        entry: [say(\"The answer is wrong! Listen to the question one more time.\"), assign({counter: (context) => context.counter })],\n                        on: { ENDSPEECH: 'prompt1' }\n                    },\n                    \n                    nomatch1: {\n                            entry: [say(\"The answer is wrong!\"), assign({counter: (context) => context.counter })],\n                            on: { ENDSPEECH: 'loose2' }\n                    },\n                    loose2: {\n                        entry: say(\"sorry, you have lost!\"),\n                        \n\n\n                    }\n                }\n            },\n            question4: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [{\n                        target: '#root.dm.Help',\n                        cond: (context) => \"help\" in (yes_nogrammar[context.recResult[0].utterance] || {}),\n                                },\n                            {\n                         target: 'question5', \n                         cond: (context) =>\"question4\" in (grammar[context.recResult[0].utterance] || {}),\n                         actions: assign((context) => { return { question4: grammar[context.recResult[0].utterance].question4! }})},\n                    \n                        { target: \".nomatch\" }\n                    ]\n                },\n                   \n                states: {\n                    prompt: {\n                        entry: send((context) => ({\n                            type: \"SPEAK\",\n                            value: `${context.question3} .For the rest two answers you have only one chance to answer correct. So, let's move on. Question 4. It belongs to you, but other people use it more than you do. What is it?`\n                        })),\n                        on: { ENDSPEECH: \"ask\" }\n                    },\n                    ask: {\n                        entry:send('LISTEN')\n                    },\n                    nomatch: {\n                        entry: say(\"Sorry you have lost.\"),\n                        \n                    }\n                }\n            },\n            question5: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [{\n                        target: '#root.dm.Help',\n                        cond: (context) => \"help\" in (yes_nogrammar[context.recResult[0].utterance] || {}),\n                                },\n                            {\n                         target: 'Win', \n                         cond: (context) =>\"question5\" in (grammar[context.recResult[0].utterance] || {}),\n                         actions: assign((context) => { return { question5: grammar[context.recResult[0].utterance].question5! }})},\n                          \n                         \n                        { target: \".nomatch\" }\n                    ],\n                    \n                \n    \n                },\n                states: {\n                    prompt: {\n                        entry: [send((context) => ({\n                            type: 'SPEAK',\n                            value: `You have answered ${context.question4} the fourth question. And now it's time for the last one. If you drop me I'm sure to crack, but give me a smile and I'll always smile back. What am I?`\n                        })),\n                        assign({counter: (context) => context.counter + 1})],\n                        on: { ENDSPEECH: 'ask' }\n                    },\n                    prompt1: {\n                        entry: [send((context) => ({\n                            type: 'SPEAK',\n                            value: ` What can you break, even if you never pick it up or touch it?`\n                        })),\n                        assign({counter: (context) => context.counter + 1})],\n                        on: { ENDSPEECH: 'ask' }\n                    },\n                    \n                        \n                    \n                    ask: {\n                        entry: send('LISTEN'),\n                    },\n                    nomatch: {\n                        entry: say(\"Sorry you have answered incorrectly! You have lost!\"),\n                        \n                    },\n            \n            \n                    \n                \n            }\n        },\n           \n            Win: {\n                initial: \"prompt\",\n                states: {\n                    prompt: { entry: say(\"Congratulations, you have won!\") }}}}}}})","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, actions, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmGame1\";\n\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\n\n\nconst { send, cancel } = actions\n\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\nconst REGION = 'northeurope';\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\n\nconst defaultPassivity = 20\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n\n        asrtts: {\n            initial: 'init',\n            states: {\n                init: {\n                    on: {\n                        CLICK: {\n                            target: 'getToken',\n                            actions: [\n                                assign({\n                                    audioCtx: (_ctx) =>\n                                        new ((window as any).AudioContext || (window as any).webkitAudioContext)()\n                                }),\n                                (context) =>\n                                    navigator.mediaDevices.getUserMedia({ audio: true })\n                                        .then(function(stream) { context.audioCtx.createMediaStreamSource(stream) })\n                            ]\n                        }\n                    }\n                },\n                getToken: {\n                    invoke: {\n                        id: \"getAuthorizationToken\",\n                        src: (_ctx, _evt) => getAuthorizationToken(),\n                        onDone: {\n                            actions: [\n                                assign((_context, event) => { return { azureAuthorizationToken: event.data } }),\n                                'ponyfillASR'],\n                            target: 'ponyfillTTS'\n                        },\n                        onError: {\n                            target: 'fail'\n                        }\n                    }\n                },\n                ponyfillTTS: {\n                    invoke: {\n                        id: 'ponyTTS',\n                        src: (context, _event) => (callback, _onReceive) => {\n                            const ponyfill = createSpeechSynthesisPonyfill({\n                                audioContext: context.audioCtx,\n                                credentials: {\n                                    region: REGION,\n                                    authorizationToken: context.azureAuthorizationToken,\n                                }\n                            });\n                            const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\n                            context.tts = speechSynthesis\n                            context.ttsUtterance = SpeechSynthesisUtterance\n                            context.tts.addEventListener('voiceschanged', () => {\n                                context.tts.cancel()\n                                const voices = context.tts.getVoices();\n                                let voiceRe = RegExp(\"en-US\", 'u')\n                                if (process.env.REACT_APP_TTS_VOICE) {\n                                    voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u')\n                                }\n                                const voice = voices.find((v: any) => voiceRe.test(v.name))!\n                                if (voice) {\n                                    context.voice = voice\n                                    callback('TTS_READY')\n                                } else {\n                                    console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`)\n                                    callback('TTS_ERROR')\n                                }\n                            })\n                        }\n                    },\n                    on: {\n                        TTS_READY: 'idle',\n                        TTS_ERROR: 'fail'\n                    }\n                },\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    },\n                },\n                recognising: {\n                    initial: 'noinput',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => {\n                                    return {\n                                        recResult: event.value\n                                    }\n                                })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle',\n                        SELECT: 'idle',\n                        CLICK: '.pause'\n                    },\n                    states: {\n                        noinput: {\n                            entry: [\n                                'recStart',\n                                send(\n                                    { type: 'TIMEOUT' },\n                                    { delay: (context) => (2000 * (context.tdmPassivity || defaultPassivity)), id: 'timeout' }\n                                )],\n                            on: {\n                                TIMEOUT: '#root.asrtts.idle',\n                                STARTSPEECH: 'inprogress'\n                            },\n                            exit: cancel('timeout')\n                        },\n                        inprogress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                        pause: {\n                            entry: 'recStop',\n                            on: { CLICK: 'noinput' }\n                        }\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                        SELECT: 'idle',\n                        CLICK: { target: 'idle', actions: send('ENDSPEECH') }\n                    },\n                    exit: 'ttsStop',\n                },\n                fail: {}\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"]);\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n    alternative: any;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    var promptText = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"name\") || {}).value;\n    var promptImage = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"image\") || {}).value;\n    var circleClass = \"circle\"\n    switch (true) {\n        case props.state.matches({ asrtts: 'fail' }) || props.state.matches({ dm: 'fail' }):\n            break;\n        case props.state.matches({ asrtts: { recognising: 'pause' } }):\n            promptText = \"Click to continue\"\n            break;\n        case props.state.matches({ asrtts: 'recognising' }):\n            circleClass = \"circle-recognising\"\n            promptText = promptText || 'Listening...'\n            break;\n        case props.state.matches({ asrtts: 'speaking' }):\n            circleClass = \"circle-speaking\"\n            promptText = promptText || 'Speaking...'\n            break;\n        case props.state.matches({ dm: 'idle' }):\n            promptText = \"Click to start!\"\n            circleClass = \"circle-click\"\n            break;\n        case props.state.matches({ dm: 'init' }):\n            promptText = \"Click to start!\"\n            circleClass = \"circle-click\"\n            break;\n        default:\n            promptText = promptText || '\\u00A0'\n    }\n    return (\n        <div className=\"control\">\n            <figure className=\"prompt\">\n                {promptImage &&\n                    <img src={promptImage}\n                        alt={promptText} />}\n            </figure>\n            <div className=\"status\">\n                <button type=\"button\" className={circleClass}\n                    style={{}} {...props}>\n                </button>\n                <div className=\"status-text\">\n                    {promptText}\n                </div>\n            </div>\n        </div>);\n}\n\nconst FigureButton = (props: Props): JSX.Element => {\n    const caption = props.alternative.find((el: any) => el.attribute === \"name\").value\n    const imageSrc = (props.alternative.find((el: any) => el.attribute === \"image\") || {}).value\n    return (\n        <figure className=\"flex\" {...props}>\n            {imageSrc &&\n                <img src={imageSrc} alt={caption} />}\n            <figcaption>{caption}</figcaption>\n        </figure>\n    )\n}\n\nfunction App() {\n    const [current, send] = useMachine(machine, {\n        devTools: true,\n        actions: {\n\n            changeColour: asEffect((context) => {\n                document.body.style.background = context.recResult[0].utterance;\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n\n            recStart: asEffect((context) => {\n                context.asr.start()\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n            recStop: asEffect((context) => {\n                context.asr.abort()\n                /* console.log('Recognition stopped.'); */\n            }),\n            ttsStart: asEffect((context) => {\n                let content = `<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:mstts=\"http://www.w3.org/2001/mstts\" xml:lang=\"en-US\"><voice name=\"${context.voice.name}\">`\n                content = content + (process.env.REACT_APP_TTS_LEXICON ? `<lexicon uri=\"${process.env.REACT_APP_TTS_LEXICON}\"/>` : \"\")\n                content = content + `${context.ttsAgenda}</voice></speak>`\n                console.debug(content)\n                const utterance = new context.ttsUtterance(content);\n                console.log(\"S>\", context.ttsAgenda)\n                utterance.voice = context.voice\n                utterance.onend = () => send('ENDSPEECH')\n                context.tts.speak(utterance)\n            }),\n            ttsStop: asEffect((context) => {\n                /* console.log('TTS STOP...'); */\n                context.tts.cancel()\n            }),\n            ponyfillASR: asEffect((context, _event) => {\n                const\n                    { SpeechRecognition }\n                        = createSpeechRecognitionPonyfill({\n                            audioContext: context.audioCtx,\n                            credentials: {\n                                region: REGION,\n                                authorizationToken: context.azureAuthorizationToken,\n                            }\n                        });\n                context.asr = new SpeechRecognition()\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\n                context.asr.continuous = true\n                context.asr.interimResults = true\n                context.asr.onresult = function(event: any) {\n                    var result = event.results[0]\n                    if (result.isFinal) {\n                        send({\n                            type: \"ASRRESULT\", value:\n                                [{\n                                    \"utterance\": result[0].transcript,\n                                    \"confidence\": result[0].confidence\n                                }]\n                        })\n                    } else {\n                        send({ type: \"STARTSPEECH\" });\n                    }\n                }\n\n            })\n        }\n    });\n    const figureButtons = (current.context.tdmExpectedAlternatives || []).filter((o: any) => o.visual_information)\n        .map(\n            (o: any, i: any) => (\n                <FigureButton state={current}\n                    alternative={o.visual_information}\n                    key={i}\n                    onClick={() => send({ type: 'SELECT', value: o.semantic_expression })} />\n            )\n        )\n\n    switch (true) {\n        default:\n            return (\n                <div className=\"App\">\n                    <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\n                    <div className=\"select-wrapper\">\n                        <div className=\"select\">\n                            {figureButtons}\n                        </div>\n                    </div>\n                </div>\n            )\n    }\n\n};\n\nconst getAuthorizationToken = () => (\n    fetch(new Request(TOKEN_ENDPOINT, {\n        method: 'POST',\n        headers: {\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\n        },\n    })).then(data => data.text()))\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}