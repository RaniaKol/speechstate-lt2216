{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","grammar","title","day","time","meet","celebrity","yes_nogrammar","yes_no","dmMachine","initial","states","idle","on","CLICK","init","TTS_READY","Hej","RECOGNISED","target","actions","assign","username","context","recResult","utterance","TIMEOUT","prompt","entry","ENDSPEECH","ask","welcome","meeting","cond","nomatch","celeb_info","invoke","id","src","event","fetch","Request","then","data","json","onDone","famouS","AbstractText","console","log","onError","meeting_with_celeb","date","all_day","ask_about","whole_day","confirmation_whole_day","confirmation_with_time","meeting_created","cancel","REGION","inspect","url","iframe","machine","Machine","dm","asrtts","audioCtx","_ctx","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","stream","createMediaStreamSource","getToken","_evt","getAuthorizationToken","azureAuthorizationToken","ponyfillTTS","_event","callback","_onReceive","ponyfill","createSpeechSynthesisPonyfill","audioContext","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","process","voice","find","v","test","name","error","TTS_ERROR","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","SELECT","noinput","delay","tdmPassivity","STARTSPEECH","inprogress","match","pause","speaking","fail","recLogResult","logIntent","nluData","intent","ReactiveButton","props","promptText","state","tdmVisualOutputInfo","el","attribute","promptImage","circleClass","matches","className","alt","style","FigureButton","caption","alternative","imageSrc","App","useMachine","devTools","changeColour","asEffect","document","body","background","recStart","asr","start","recStop","abort","ttsStart","content","REACT_APP_TTS_LEXICON","debug","onend","speak","ttsStop","ponyfillASR","SpeechRecognition","createSpeechRecognitionPonyfill","lang","continuous","interimResults","onresult","result","results","isFinal","transcript","confidence","current","figureButtons","tdmExpectedAlternatives","filter","o","visual_information","map","i","onClick","semantic_expression","method","headers","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.2a979d59.chunk.js","sourcesContent":["import { TIMEOUT } from \"dns\";\nimport { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\nconst kbRequest = (text: string) =>\n    fetch(new Request(`https://cors.eu.org/https://api.duckduckgo.com/?q=${text}&format=json&skip_disambig=1`)).then(data => data.json())\n\nconst grammar: { [index: string]: { title?: string, day?: string, time?: string, meet?:string, celebrity?:string,username?:string } } = {\n    \"Lecture.\": { title: \"Dialogue systems lecture\" },\n    \"Lunch.\": { title: \"Lunch at the canteen\" },\n    //days\n    \"Monday\": { day: \"Monday\"},\n    \"Tuesday.\": { day: \"Tuesday\"},\n    \"Wednesday.\": { day: \"Wednesday\"},\n    \"Thursday.\": { day: \"Thursday\"},\n    \"Friday\": { day: \"Friday\" },\n    \n    //time\n    \"At 9\": { time: \"nine\"},\n    \"At 10\": { time: \"ten\" },\n    \"At 11\": { time: \"eleven\"},\n    \"At 12\": { time: \"twelve\"},\n    \"At 1:00\": { time: \"one\"},\n    \"At 2:00\": { time: \"two\"},\n    \"At 3:00\": { time: \"three\"},\n    \"At 4:00\": { time: \"four\"},\n    \"At 5:00\": { time: \"five\"},\n    \"At 6:00\": { time: \"six\"},\n    \"At 7:00\": { time: \"seven\"},\n    \"At 8:00\": { time: \"eight\"},\n   \n    \"Create a meeting.\":{ meet:\"yes\"},\n    \"Ask about someone.\":{ celebrity:\"no\" },\n    \n}\n\nconst yes_nogrammar: { [index: string]: { yes_no?: string } } = {\n    \"Yes.\": { yes_no: \"yes\"},\n    \"Of course.\": { yes_no: \"yes\"},\n    \"Sure.\": { yes_no: \"yes\"},\n    \"Absolutely.\": { yes_no: \"yes\"},\n    \"No.\": { yes_no: \"no\"},\n    \"No way.\": { yes_no: \"no\"},\n    \"Of course not.\": { yes_no: \"no\"},\n    \"Absolutely not.\": { yes_no: \"no\"},\n}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n        idle: {\n            on: {\n                CLICK: 'init'\n            }\n        },\n        init: {\n            on: {\n                TTS_READY: 'Hej',\n                CLICK: 'Hej'\n            }\n        },\n\n        Hej: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'welcome',\n                        actions: assign({ username: (context) => context.recResult[0].utterance })\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: say(\"What's your name?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                }\n            }\n        },\n\n        welcome: {\n            entry: send((context) => ({\n                type: 'SPEAK',\n                value: `Hello, ${context.username}!`\n            })),\n            on: { ENDSPEECH: 'meeting' }\n        },\n\n        meeting: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {target: 'ask_about',\n                    cond: (context) => \"meet\" in (grammar[context.recResult[0].utterance] || {}) && grammar[context.recResult[0].utterance].meet === 'yes',\n                    },\n                    {target: 'celebrity',\n                    cond: (context) => \"celebrity\" in (grammar[context.recResult[0].utterance] || {}) && grammar[context.recResult[0].utterance].celebrity === 'no',\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Would you like to create a meeting or ask about someone?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I didn't understand that.\"),\n                    on: { ENDSPEECH: 'prompt' }\n                }\n            }\n        },\n\n        celebrity: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'celeb_info',\n                        actions: assign({ celebrity: (context) => context.recResult[0].utterance })\n                    },\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: say(\"For whom do you want to know?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                }\n            }\n        },\n\n        celeb_info: {\n            entry: send((context) => ({\n                type: 'SPEAK',\n                value: `Ok, you are looking information for ${context.celebrity}.`\n            })),\n            on: { ENDSPEECH: 'ask' }\n        },\n\n        ask: {\n            invoke: {\n                id: 'famouSId',\n                src: (context, event) => kbRequest(context.celebrity),\n                onDone: {target: 'meeting_with_celeb',\n                    actions: [assign({ famouS: (context, event) => event.data.AbstractText }),(context, event) => console.log(context, event)\n                    ]\n                },\n                onError: {\n                    target: 'celebrity'\n                }\n            }\n        },\n\n        meeting_with_celeb: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {target: 'date',\n                    cond: (context) => \"yes_no\" in (yes_nogrammar[context.recResult[0].utterance] || {})  && yes_nogrammar[context.recResult[0].utterance].yes_no === 'yes',\n                    actions: assign({ title: (context) => ` ${context.celebrity}` })\n                    },\n                    {target: 'meeting',\n                    cond: (context) => \"yes_no\" in (yes_nogrammar[context.recResult[0].utterance] || {})  && yes_nogrammar[context.recResult[0].utterance].yes_no === 'no',\n                    },\n                    {target: '.nomatch'}\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: 'SPEAK',\n                        value: `Some information about ${context.celebrity}, ${context.famouS}. Do you want to meet ${context.celebrity}?`\n                    })),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I didn't understand. Could you repeat?\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n            }\n        },\n        date: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult[0].utterance] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult[0].utterance].day! } }),\n                    target: \"all_day\"\n                },\n                    { target: \".nomatch\" }],\n\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Ok, Meeting with ${context.celebrity}. On which day is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: send('LISTEN')\n                },\n                nomatch: {\n                    entry: say(\"Sorry, could you repeat the day?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                }\n            }\n        },\n        all_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    { target: 'confirmation_whole_day', \n                    cond: (context) => \"yes_no\" in (yes_nogrammar[context.recResult[0].utterance] || {})  && yes_nogrammar[context.recResult[0].utterance].yes_no === 'yes'},\n                    { target: 'time', \n                    cond: (context) =>  \"yes_no\" in (yes_nogrammar[context.recResult[0].utterance] || {}) && yes_nogrammar[context.recResult[0].utterance].yes_no === 'no' },\n                \n                    { target: \".nomatch\" }],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Ok, meeting with ${context.celebrity} on ${context.day}. Will it take all day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry:send('LISTEN') \n                },\n                nomatch: {\n                    entry: say(\"Sorry I didn't understand. Will it take the whole day?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                }\n            }\n        },\n        \n        ask_about: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"title\" in (grammar[context.recResult[0].utterance] || {}),\n                    actions: assign((context) => { return { title: grammar[context.recResult[0].utterance].title! }}),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" },\n            ],\n            TIMEOUT: '.prompt',\n            },\n            states: {\n                prompt: {\n                    entry: say(\"What is it about?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: send('LISTEN')\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult[0].utterance] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult[0].utterance].day! } }),\n                    target: \"whole_day\"\n                },\n                    { target: \".nomatch\" }],\n\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Ok, Meeting for ${context.title}. On which day is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: send('LISTEN')\n                },\n                nomatch: {\n                    entry: say(\"Sorry, could you repeat the day?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                }\n            }\n        },\n        whole_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [\n                    { target: 'meeting_created', cond: (context) => \"yes_no\" in (yes_nogrammar[context.recResult[0].utterance] || {})  && yes_nogrammar[context.recResult[0].utterance].yes_no === 'yes'},\n                    { target: 'time', cond: (context) =>  \"yes_no\" in (yes_nogrammar[context.recResult[0].utterance] || {}) && yes_nogrammar[context.recResult[0].utterance].yes_no === 'no' },\n                \n                    { target: \".nomatch\" }],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Ok, meeting for ${context.title} on ${context.day}. Will it take the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry:send('LISTEN') \n                },\n                nomatch: {\n                    entry: say(\"Sorry I didn't understand. Will it take the whole day?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                }\n            }\n        },\n        time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult[0].utterance] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult[0].utterance].time! } }),\n                    target: \"confirmation_with_time\"\n                },\n                    { target: \".nomatch\" }],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Ok. What time is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry:send('LISTEN') \n                },\n                nomatch: {\n                    entry: say(\"Sorry could you repeat the time?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                }\n            }\n        },\n        confirmation_whole_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                     target: 'meeting_created', \n                     cond: (context) => \"yes_no\" in (yes_nogrammar[context.recResult[0].utterance] || {}) && yes_nogrammar[context.recResult[0].utterance].yes_no === 'yes' },\n                     { target: 'time', \n                     cond: (context) => \"yes_no\" in (yes_nogrammar[context.recResult[0].utterance] || {}) && yes_nogrammar[context.recResult[0].utterance].yes_no === 'no'},\n                    { target: \".nomatch\" }],\n                TIMEOUT:'.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create a meeting titled ${context.title} on ${context.day} for the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry:send('LISTEN')\n                },\n                nomatch: {\n                    entry: say(\"Sorry I didn't understand.\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        confirmation_with_time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                     target: 'meeting_created', \n                     cond: (context) =>\"yes_no\" in (yes_nogrammar[context.recResult[0].utterance] || {}) && yes_nogrammar[context.recResult[0].utterance].yes_no === 'yes'},\n                     { target: 'meeting', \n                     cond: (context) => \"yes_no\" in (yes_nogrammar[context.recResult[0].utterance] || {}) && yes_nogrammar[context.recResult[0].utterance].yes_no === 'no'},\n                    { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want me to create a meeting titled ${context.title} on ${context.day} at ${context.time}?`\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry:send('LISTEN')\n                },\n                nomatch: {\n                    entry: say(\"Sorry I didn't understand.\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        meeting_created: {\n            initial: \"prompt\",\n            states: {\n                prompt: { entry: say(\"Ok.Your meeting has been created!\") }\n            }\n        },\n}})\n    \n    \n\n\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, actions, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointment\";\n\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\n\n\nconst { send, cancel } = actions\n\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\nconst REGION = 'northeurope';\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\n\nconst defaultPassivity = 10\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n\n        asrtts: {\n            initial: 'init',\n            states: {\n                init: {\n                    on: {\n                        CLICK: {\n                            target: 'getToken',\n                            actions: [\n                                assign({\n                                    audioCtx: (_ctx) =>\n                                        new ((window as any).AudioContext || (window as any).webkitAudioContext)()\n                                }),\n                                (context) =>\n                                    navigator.mediaDevices.getUserMedia({ audio: true })\n                                        .then(function(stream) { context.audioCtx.createMediaStreamSource(stream) })\n                            ]\n                        }\n                    }\n                },\n                getToken: {\n                    invoke: {\n                        id: \"getAuthorizationToken\",\n                        src: (_ctx, _evt) => getAuthorizationToken(),\n                        onDone: {\n                            actions: [\n                                assign((_context, event) => { return { azureAuthorizationToken: event.data } }),\n                                'ponyfillASR'],\n                            target: 'ponyfillTTS'\n                        },\n                        onError: {\n                            target: 'fail'\n                        }\n                    }\n                },\n                ponyfillTTS: {\n                    invoke: {\n                        id: 'ponyTTS',\n                        src: (context, _event) => (callback, _onReceive) => {\n                            const ponyfill = createSpeechSynthesisPonyfill({\n                                audioContext: context.audioCtx,\n                                credentials: {\n                                    region: REGION,\n                                    authorizationToken: context.azureAuthorizationToken,\n                                }\n                            });\n                            const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\n                            context.tts = speechSynthesis\n                            context.ttsUtterance = SpeechSynthesisUtterance\n                            context.tts.addEventListener('voiceschanged', () => {\n                                context.tts.cancel()\n                                const voices = context.tts.getVoices();\n                                let voiceRe = RegExp(\"en-US\", 'u')\n                                if (process.env.REACT_APP_TTS_VOICE) {\n                                    voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u')\n                                }\n                                const voice = voices.find((v: any) => voiceRe.test(v.name))!\n                                if (voice) {\n                                    context.voice = voice\n                                    callback('TTS_READY')\n                                } else {\n                                    console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`)\n                                    callback('TTS_ERROR')\n                                }\n                            })\n                        }\n                    },\n                    on: {\n                        TTS_READY: 'idle',\n                        TTS_ERROR: 'fail'\n                    }\n                },\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    },\n                },\n                recognising: {\n                    initial: 'noinput',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => {\n                                    return {\n                                        recResult: event.value\n                                    }\n                                })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle',\n                        SELECT: 'idle',\n                        CLICK: '.pause'\n                    },\n                    states: {\n                        noinput: {\n                            entry: [\n                                'recStart',\n                                send(\n                                    { type: 'TIMEOUT' },\n                                    { delay: (context) => (1000 * (context.tdmPassivity || defaultPassivity)), id: 'timeout' }\n                                )],\n                            on: {\n                                TIMEOUT: '#root.asrtts.idle',\n                                STARTSPEECH: 'inprogress'\n                            },\n                            exit: cancel('timeout')\n                        },\n                        inprogress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                        pause: {\n                            entry: 'recStop',\n                            on: { CLICK: 'noinput' }\n                        }\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                        SELECT: 'idle',\n                        CLICK: { target: 'idle', actions: send('ENDSPEECH') }\n                    },\n                    exit: 'ttsStop',\n                },\n                fail: {}\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"]);\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n    alternative: any;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    var promptText = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"name\") || {}).value;\n    var promptImage = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"image\") || {}).value;\n    var circleClass = \"circle\"\n    switch (true) {\n        case props.state.matches({ asrtts: 'fail' }) || props.state.matches({ dm: 'fail' }):\n            break;\n        case props.state.matches({ asrtts: { recognising: 'pause' } }):\n            promptText = \"Click to continue\"\n            break;\n        case props.state.matches({ asrtts: 'recognising' }):\n            circleClass = \"circle-recognising\"\n            promptText = promptText || 'Listening...'\n            break;\n        case props.state.matches({ asrtts: 'speaking' }):\n            circleClass = \"circle-speaking\"\n            promptText = promptText || 'Speaking...'\n            break;\n        case props.state.matches({ dm: 'idle' }):\n            promptText = \"Click to start!\"\n            circleClass = \"circle-click\"\n            break;\n        case props.state.matches({ dm: 'init' }):\n            promptText = \"Click to start!\"\n            circleClass = \"circle-click\"\n            break;\n        default:\n            promptText = promptText || '\\u00A0'\n    }\n    return (\n        <div className=\"control\">\n            <figure className=\"prompt\">\n                {promptImage &&\n                    <img src={promptImage}\n                        alt={promptText} />}\n            </figure>\n            <div className=\"status\">\n                <button type=\"button\" className={circleClass}\n                    style={{}} {...props}>\n                </button>\n                <div className=\"status-text\">\n                    {promptText}\n                </div>\n            </div>\n        </div>);\n}\n\nconst FigureButton = (props: Props): JSX.Element => {\n    const caption = props.alternative.find((el: any) => el.attribute === \"name\").value\n    const imageSrc = (props.alternative.find((el: any) => el.attribute === \"image\") || {}).value\n    return (\n        <figure className=\"flex\" {...props}>\n            {imageSrc &&\n                <img src={imageSrc} alt={caption} />}\n            <figcaption>{caption}</figcaption>\n        </figure>\n    )\n}\n\nfunction App() {\n    const [current, send] = useMachine(machine, {\n        devTools: true,\n        actions: {\n\n            changeColour: asEffect((context) => {\n                document.body.style.background = context.recResult[0].utterance;\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n\n            recStart: asEffect((context) => {\n                context.asr.start()\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n            recStop: asEffect((context) => {\n                context.asr.abort()\n                /* console.log('Recognition stopped.'); */\n            }),\n            ttsStart: asEffect((context) => {\n                let content = `<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:mstts=\"http://www.w3.org/2001/mstts\" xml:lang=\"en-US\"><voice name=\"${context.voice.name}\">`\n                content = content + (process.env.REACT_APP_TTS_LEXICON ? `<lexicon uri=\"${process.env.REACT_APP_TTS_LEXICON}\"/>` : \"\")\n                content = content + `${context.ttsAgenda}</voice></speak>`\n                console.debug(content)\n                const utterance = new context.ttsUtterance(content);\n                console.log(\"S>\", context.ttsAgenda)\n                utterance.voice = context.voice\n                utterance.onend = () => send('ENDSPEECH')\n                context.tts.speak(utterance)\n            }),\n            ttsStop: asEffect((context) => {\n                /* console.log('TTS STOP...'); */\n                context.tts.cancel()\n            }),\n            ponyfillASR: asEffect((context, _event) => {\n                const\n                    { SpeechRecognition }\n                        = createSpeechRecognitionPonyfill({\n                            audioContext: context.audioCtx,\n                            credentials: {\n                                region: REGION,\n                                authorizationToken: context.azureAuthorizationToken,\n                            }\n                        });\n                context.asr = new SpeechRecognition()\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\n                context.asr.continuous = true\n                context.asr.interimResults = true\n                context.asr.onresult = function(event: any) {\n                    var result = event.results[0]\n                    if (result.isFinal) {\n                        send({\n                            type: \"ASRRESULT\", value:\n                                [{\n                                    \"utterance\": result[0].transcript,\n                                    \"confidence\": result[0].confidence\n                                }]\n                        })\n                    } else {\n                        send({ type: \"STARTSPEECH\" });\n                    }\n                }\n\n            })\n        }\n    });\n    const figureButtons = (current.context.tdmExpectedAlternatives || []).filter((o: any) => o.visual_information)\n        .map(\n            (o: any, i: any) => (\n                <FigureButton state={current}\n                    alternative={o.visual_information}\n                    key={i}\n                    onClick={() => send({ type: 'SELECT', value: o.semantic_expression })} />\n            )\n        )\n\n    switch (true) {\n        default:\n            return (\n                <div className=\"App\">\n                    <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\n                    <div className=\"select-wrapper\">\n                        <div className=\"select\">\n                            {figureButtons}\n                        </div>\n                    </div>\n                </div>\n            )\n    }\n\n};\n\nconst getAuthorizationToken = () => (\n    fetch(new Request(TOKEN_ENDPOINT, {\n        method: 'POST',\n        headers: {\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\n        },\n    })).then(data => data.text()))\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}